import asyncio
import time
import os
import httpx
from PIL import Image, ImageDraw, ImageFont, ImageOps
import textwrap
from io import BytesIO
from datetime import datetime
import json
import asyncio
from telethon.tl.functions.messages import ReadHistoryRequest
import random
from collections import deque
import re
import uuid
from telethon.tl.types import User, ChannelParticipantCreator, ChannelParticipantAdmin
from telethon import TelegramClient, events, Button
from telethon.errors import UsernameInvalidError, UserNotMutualContactError, FloodWaitError, PeerFloodError, UserPrivacyRestrictedError, ChatAdminRequiredError, MessageIdInvalidError, MessageNotModifiedError
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.types import ChannelParticipantsAdmins
import replicate
from telethon.tl.types import ChannelParticipantsSearch
import aiohttp
from telethon.tl.types import Channel, Chat
from dataclasses import dataclass, field
from typing import Dict
from telethon.tl.types import ChannelParticipantsAdmins, ChannelParticipantCreator, ChannelParticipantAdmin, User
from telethon.errors.rpcerrorlist import ChatAdminRequiredError
import requests


# --- –í–ê–ñ–ù–û: –ù–ê–°–¢–†–û–ô–¢–ï –í–ê–®–ò –ê–ö–ö–ê–£–ù–¢–´ –ù–ò–ñ–ï ---
ACCOUNTS = [
    {
        'api_id': 29564997,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ API ID –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        'api_hash': '435acfcb83c05255fdfcba6fffb3e11c',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ API Hash –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        'session_name': 'my_userbot_session' # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    }
]
MISTRAL_API_KEY = "zuqIvHaKX3Lg3oWM6UF6uFHVT047g3t5"
REPLICATE_API_TOKEN = "r8_CuZy4cz7qVfvTe3qh2ZSu42F7UsFgNM4GvkcD"
NICKNAMES_FILE = 'nicknames.json'
os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_TOKEN
last_message_times = {}
COMMAND_COOLDOWN = 5
AUTOREPLY_FILE = 'autoreplies.json'
MY_USER_ID = 812717808 # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ None, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

clients = []
for acc in ACCOUNTS:
    client = TelegramClient(acc['session_name'], acc['api_id'], acc['api_hash'])
    clients.append(client)
    client = clients[0]  # –°–¥–µ–ª–∞–µ–º client –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

RPS_RULES = {
    '–∫–∞–º–µ–Ω—å': '–Ω–æ–∂–Ω–∏—Ü—ã',   # –ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã
    '–Ω–æ–∂–Ω–∏—Ü—ã': '–±—É–º–∞–≥–∞',   # –ù–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É
    '–±—É–º–∞–≥–∞': '–∫–∞–º–µ–Ω—å'     # –ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å
}

RPS_CHOICES = {
    '–∫–∞–º–µ–Ω—å': 'ü™®',
    '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è',
    '–±—É–º–∞–≥–∞': 'üìã'
}
BACKGROUND_IMAGES = {
    1: r'C:/Users/–ö–æ–±—Ä–∞/Downloads/—Ñ–æ–Ω1.jpg',   # –ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–≤—ã–π —Ñ–æ–Ω
    2: r'C:/Users/–ö–æ–±—Ä–∞/Downloads/—Ñ–æ–Ω2.jpg',   # –ü—Ä–∏–º–µ—Ä: –í—Ç–æ—Ä–æ–π —Ñ–æ–Ω
    3: r'C:/Users/–ö–æ–±—Ä–∞/Downloads/—Ñ–æ–Ω3.jpg',  # –ü—Ä–∏–º–µ—Ä: –¢—Ä–µ—Ç–∏–π —Ñ–æ–Ω
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ —Å—Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤, —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ
}
# –§–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω
DEFAULT_BACKGROUND_PATH = r'C:/Users/–ö–æ–±—Ä–∞/Downloads/—Ñ—ã–≤–ø.jpg' # –í–∞—à —Ç–µ–∫—É—â–∏–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:
# {
#     'api_id': –í–ê–®_API_ID_2,
#     'api_hash': '–í–ê–®_API_HASH_2',
#     'session_name': 'my_second_userbot_session'
# },
# --------------------------------------------------
HELP_TEXT_PAGE_1 = (
    "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/2):**\n\n"
    "‚ú® .–ø–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.\n"
    "ü§ñ .botinfo - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.\n"
    "‚ÑπÔ∏è .–∏–Ω—Ñ–æ [—é–∑–µ—Ä–Ω–µ–π–º/ID] / [–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n"
    "üèì .–ø–∏–Ω–≥ - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞.\n"
    "‚ù§Ô∏è .love - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.\n"
    "‚ù§Ô∏è .—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–¥—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥.\n"
    "üí¨ .—Ü–∏—Ç –ª–∏–±–æ .—Ü–∏—Ç [–Ω–æ–º–µ—Ä —Ñ–æ–Ω–∞ –æ—Ç 1 –¥–æ 3] (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
    "üê± .–∫–æ—Ç–∏–∫–∏ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ—Ç–∏–∫–∞.\n"
    "üê∂ .—Å–æ–±–∞—á–∫–∏ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–±–∞—á–∫–∏.\n"
    "‚ûï .–¥–æ–±–∞–≤–∏—Ç—å [—é–∑–µ—Ä–Ω–µ–π–º/ID] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).\n"
    "üì© .–∏–≥–Ω–æ—Ä - –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
    "üî• .–æ–≥–æ–Ω—å - –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ–≥–Ω—è.\n"
    "üî¢ .–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.\n"
    "‚òÄÔ∏è .–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ.\n"
    "üí¨ .—á–∞—Ç–∏–Ω—Ñ–æ - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.\n"
    "üÜï .ai - –ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç. (–ù–û–í–ò–ù–ö–ê)\n"
    "üìö .wiki [–∑–∞–ø—Ä–æ—Å] - –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia.\n\n"

    "üé≤ **–ò–≥—Ä–∞ '–°–ª–æ–≤–∞ (–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É)':**\n"
    " ¬†.—Å–ª–ø–æ–¥–±–æ—Ä - –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤.\n"
    " ¬†.—Å–ª–≤–æ–π—Ç–∏ - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.\n"
    " ¬†.—Å–ª—Å—Ç–∞—Ä—Ç - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä).\n"
    " ¬†.—Å–ª—Å—Ç–æ–ø - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä).\n"
    " ¬†.—Å–ª–≤—ã–π—Ç–∏ - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã.\n"
    " ¬†.—Å–ª–≤–µ—Ä–Ω—É—Ç—Å—è - –í–µ—Ä–Ω—É—Ç—Å—è –≤ –∏–≥—Ä—É (–∫–æ–≥–¥–∞ –∏–≥—Ä–∞–µ—Ç –±–æ–ª–µ–µ 2—Ö —á–µ–ª–æ–≤–µ–∫).\n\n\n"
    " üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–†–ü –ö–æ–º–∞–Ω–¥—ã:**\n"
    " .–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å [—é–∑–µ—Ä]\n"
    " .—É–∫—É—Å–∏—Ç—å [—é–∑–µ—Ä]\n"
    " .–æ–±–Ω—è—Ç—å [—é–∑–µ—Ä]\n"
    " .—à–ª–µ–ø–Ω—É—Ç—å[—é–∑–µ—Ä]\n"
    " .—É–¥–∞—Ä–∏—Ç—å [—é–∑–µ—Ä]\n"
    " .–ø–æ–≥–ª–∞–¥–∏—Ç—å [—é–∑–µ—Ä]\n\n"

    "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–æ—á–∫–æ–π –≤ –Ω–∞—á–∞–ª–µ.\n"
    "‚ÑπÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ 2 —Å—Ç—Ä–∞–Ω–∏—Ü—É - .–ø–æ–º–æ—â—å2\n\n"
    "üëë [MorganLP](t.me/sedativine)"
)

HELP_TEXT_PAGE_2 = (
    "üìö **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —é–∑–µ—Ä–±–æ—Ç–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2/2):**\n\n"
    "üé≤ .–∫—É–±–∏–∫ - –ë—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.\n"
    "üóíÔ∏è .—Ü–∏—Ç–∞—Ç–∞–¥–Ω—è - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –¥–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
    "üîÆ .–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å [–≤–æ–ø—Ä–æ—Å] - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
    "üìå .–∑–∞–∫—Ä–µ–ø–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π).\n"
    "üíò .—Å–µ—Ä–¥—Ü–µ2  - –ü–æ—Ö–æ–∂–∞—è —à—Ç—É–∫–∞ –Ω–∞ .love\n"
    "üåà .—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ  - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ (–∫–∞–∫ –≤ .love), –Ω–æ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ\n"
    "üì® .—Å–ø–∞–º [—Å–æ–æ–±—â–µ–Ω–∏–µ] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]  - –°–ø–∞–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
    "üåç .–Ω–∏–∫ [–∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫]  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫ –≤ –±–µ—Å–µ–¥–µ.\n"
    "ü§ñ .–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç [—Ç—Ä–∏–≥–µ—Ä] [—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –ø–æ —Ç—Ä–∏–≥–µ—Ä—É.\n"
    "üåê .google [–∑–∞–ø—Ä–æ—Å] - –ò—Å–∫–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ Google.\n"
    "ü™® .—Ü—É–µ—Ñ–∞ [–∫–∞–º–µ–Ω—å\–Ω–æ–∂–Ω–∏—Ü—ã\–±—É–º–∞–≥–∞] - –°—ã–≥—Ä–∞—Ç—å –≤ —Ü—É–µ—Ñ–∞ —Å –±–æ—Ç–æ–º.\n"
    "üì£ .zov|.–≤—ã–∑–æ–≤ [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –í—ã–∑–≤–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
    "\n\n"
    "üëë [MorganLP](t.me/sedativine)"
)

PROTECTED_USER_IDS = [812717808]
IGNORED_USERS_FILE = 'ignored_users.txt'
ignored_user_ids = set() # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID


RP_COMMAND_TEMPLATES = {
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": [
        "{sender} –Ω–µ–∂–Ω–æ —Ü–µ–ª—É–µ—Ç {target} –≤ —â–µ—á–∫—É.",
        "{sender} –¥–∞—Ä–∏—Ç —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π {target}.",
        "{sender} —Ü–µ–ª—É–µ—Ç {target} –≤ –ª–æ–±–∏–∫, –∂–µ–ª–∞—è –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è.",
        "{sender} –ª–µ–≥–æ–Ω—å–∫–æ —á–º–æ–∫–∞–µ—Ç {target} –≤ –Ω–æ—Å–∏–∫.",
        "{sender} –≤–æ–∑–¥—É—à–Ω–æ —Ü–µ–ª—É–µ—Ç {target}."
    ],
    "–æ–±–Ω—è—Ç—å": [
        "{sender} –∫—Ä–µ–ø–∫–æ –æ–±–Ω–∏–º–∞–µ—Ç {target}.",
        "{sender} –∑–∞–∫–ª—é—á–∞–µ—Ç {target} –≤ —Ç–µ–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è.",
        "{sender} –Ω–µ–∂–Ω–æ –æ–±–Ω–∏–º–∞–µ—Ç {target} —Å–æ —Å–ø–∏–Ω—ã.",
        "{sender} –æ–±–Ω–∏–º–∞–µ—Ç {target}, —á—Ç–æ–±—ã —É—Ç–µ—à–∏—Ç—å.",
        "{sender} –æ–±–Ω–∏–º–∞–µ—Ç {target} —Å —Ä–∞—Å–ø—Ä–æ—Å—Ç–µ—Ä—Ç—ã–º–∏ –æ–±—ä—è—Ç–∏—è–º–∏."
    ],
    "—É–¥–∞—Ä–∏—Ç—å": [
        "{sender} –Ω–µ—Å–∏–ª—å–Ω–æ —É–¥–∞—Ä—è–µ—Ç {target} –ø–æ –ø–ª–µ—á—É.",
        "{sender} –æ—Ç–≤–µ—à–∏–≤–∞–µ—Ç {target} —à—É—Ç–ª–∏–≤—ã–π –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫.",
        "{sender} –≤ —à—É—Ç–∫—É –±—å–µ—Ç {target} –∫—É–ª–∞–∫–æ–º.",
        "{sender} –≥—Ä–æ–∑–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ {target} –∏ –∑–∞–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è.",
        "{sender} –≤–Ω–µ–∑–∞–ø–Ω–æ —É–¥–∞—Ä—è–µ—Ç {target} —Å –∫—Ä–∏–∫–æ–º '–ë–∞–Ω–∑–∞–π!'."
    ],
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å": [
        "{sender} –Ω–µ–∂–Ω–æ –≥–ª–∞–¥–∏—Ç {target} –ø–æ –≥–æ–ª–æ–≤–µ.",
        "{sender} –ª–∞—Å–∫–æ–≤–æ –ø–æ–≥–ª–∞–∂–∏–≤–∞–µ—Ç {target} –ø–æ —Ä—É–∫–µ.",
        "{sender} –≥–ª–∞–¥–∏—Ç {target} –ø–æ —Å–ø–∏–Ω–∫–µ, —É—Å–ø–æ–∫–∞–∏–≤–∞—è.",
        "{sender} –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä—É–∫–æ–π –ø–æ –≤–æ–ª–æ—Å–∞–º {target}.",
        "{sender} –ø–æ–≥–ª–∞–∂–∏–≤–∞–µ—Ç {target} –ø–æ —â–µ–∫–µ."
    ],
    "—à–ª–µ–ø–Ω—É—Ç—å": [
        "{sender} —à—É—Ç–ª–∏–≤–æ —à–ª–µ–ø–∞–µ—Ç {target}.",
        "{sender} –∏–≥—Ä–∏–≤–æ —à–ª–µ–ø–∞–µ—Ç {target} –ø–æ –ø–æ–ø–∫–µ."
    ],
     "—É–∫—É—Å–∏—Ç—å": [
        "{sender} –∏–≥—Ä–∏–≤–æ –∫—É—Å–∞–µ—Ç {target} –∑–∞ —É—à–∫–æ.",
        "{sender} –¥–µ–ª–∞–µ—Ç –≤–∏–¥, —á—Ç–æ –∫—É—Å–∞–µ—Ç {target}."
    ],
     "–ø–æ–¥–∞—Ä–∏—Ç—å–∞–π—Ñ–æ–Ω": [
        "{sender} —Å –æ–±—å—è—Ç–∏—è–º–∏ –ø–æ–¥–∞—Ä–∏–ª {target} –∞–π—Ñ–æ–Ω.",
    ]
}

RP_ACTION_GIFS = {
    '–æ–±–Ω—è—Ç—å': [
        "https://media1.tenor.com/m/SKTwrr1xu2gAAAAd/the-apothecary-diaries-kusuriya-no-hitorigoto.gif",
        "https://media1.tenor.com/m/cBcV5uqNYvYAAAAd/fruits-basket-fruits.gif",
        "https://media1.tenor.com/m/nwxXREHNog0AAAAd/hug-anime.gif",
        "https://media1.tenor.com/m/7oCaSR-q1kkAAAAd/alice-vt.gif"
    ],
    '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å': [
        "https://media1.tenor.com/m/SKTwrr1xu2gAAAAd/the-apothecary-diaries-kusuriya-no-hitorigoto.gif",
        "https://media1.tenor.com/m/hK8IUmweJWAAAAAd/kiss-me-%D0%BB%D1%8E%D0%B1%D0%BB%D1%8E.gif"
    ],
    '—É–¥–∞—Ä–∏—Ç—å': [
        "https://media1.tenor.com/m/UyqTkkAxpioAAAAd/my-oni-girl-myonigirl.gif"
    ],
    '–ø–æ–≥–ª–∞–¥–∏—Ç—å': [
        "https://media.tenor.com/7cd6UYpGetIAAAAi/floppa-pet.gif"
    ],
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ RP-–¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏:
    # '–¥–µ–π—Å—Ç–≤–∏–µ': [
    #     "url_–≥–∏—Ñ–∫–∏_1",
    #     "url_–≥–∏—Ñ–∫–∏_2"
    # ],
    '—à–ª–µ–ø–Ω—É—Ç—å': [
        "https://media1.tenor.com/m/XbJu4_F243UAAAAC/mother-secretary.gif"
    ],
    '—É–∫—É—Å–∏—Ç—å': [
        "https://media1.tenor.com/m/L8GrZ1X6ThsAAAAC/bite.gif"
    ],
    '–ø–æ–¥–∞—Ä–∏—Ç—å–∞–π—Ñ–æ–Ω': [
        "https://media1.tenor.com/m/oxkQGOU-rSwAAAAd/gift-present.gif"
    ]
}


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
full_unread_messages_cache = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã "–°–ª–æ–≤–∞"
WORDS_GAME_FILE = 'words_games.json' # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
active_words_games = {} # This should be loaded from a persistent storage
active_duels: Dict[str, dict] = {}  # –∫–ª—é—á ‚Äî chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –±–æ–µ–º
autoreplies = {}
if os.path.exists(AUTOREPLY_FILE):
    with open(AUTOREPLY_FILE, 'r', encoding='utf-8') as f:
        autoreplies = json.load(f)
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(autoreplies)} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ ---
def save_autoreplies():
    with open(AUTOREPLY_FILE, 'w', encoding='utf-8') as f:
        json.dump(autoreplies, f, ensure_ascii=False, indent=4)
    print("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ ---
def load_words_games():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global active_words_games
    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä –∏–∑ —Ñ–∞–π–ª–∞: {WORDS_GAME_FILE} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(WORDS_GAME_FILE)})")
    
    if os.path.exists(WORDS_GAME_FILE):
        try:
            with open(WORDS_GAME_FILE, 'r', encoding='utf-8') as f:
                active_words_games = json.load(f)
            print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {WORDS_GAME_FILE}. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_words_games)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")
        except json.JSONDecodeError as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ {WORDS_GAME_FILE}: {e}. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
            active_words_games = {}
        except Exception as e:
            print(f"ERROR: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {WORDS_GAME_FILE}: {e}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
            active_words_games = {}
    else:
        active_words_games = {}
        print(f"DEBUG: –§–∞–π–ª {WORDS_GAME_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä. –ù–æ–≤—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

def save_words_games(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ JSON-—Ñ–∞–π–ª."""
    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä –≤ —Ñ–∞–π–ª: {WORDS_GAME_FILE} (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(WORDS_GAME_FILE)})")
    try:
        with open(WORDS_GAME_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {WORDS_GAME_FILE}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä –≤ {WORDS_GAME_FILE}: {e}")

def load_ignored_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(IGNORED_USERS_FILE):
        with open(IGNORED_USERS_FILE, 'r') as f:
            for line in f:
                try:
                    ignored_user_ids.add(int(line.strip()))
                except ValueError:
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ignored_user_ids}")

def save_ignored_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(IGNORED_USERS_FILE, 'w') as f:
        for user_id in ignored_user_ids:
            f.write(f"{user_id}\n")
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ignored_user_ids}")

load_ignored_users() # <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
active_words_games = load_words_games()

@dataclass
class PlayerState:
    id: int
    name: str
    hp: int = 100
    energy: int = 0
    defending: bool = False

@dataclass
class DuelGame:
    player1: PlayerState
    player2: PlayerState
    current_turn: int  # ID –∏–≥—Ä–æ–∫–∞, —á–µ–π —Ö–æ–¥
    message_id: int = 0
    chat_id: int = 0

    def get_opponent(self, player_id):
        return self.player1 if self.player2.id == player_id else self.player2

    def get_player(self, player_id):
        return self.player1 if self.player1.id == player_id else self.player2

    def make_move(self, actor_id, action):
        actor = self.get_player(actor_id)
        target = self.get_opponent(actor_id)

        if action == "attack":
            damage = 10
            if target.defending:
                damage //= 2
            target.hp -= damage
            actor.energy += 1
            target.defending = False
            return f"üó° {actor.name} –∞—Ç–∞–∫—É–µ—Ç! –ù–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞."

        elif action == "defend":
            actor.defending = True
            return f"üõ° {actor.name} –≤—Å—Ç–∞–ª –≤ –∑–∞—â–∏—Ç—É!"

        elif action == "super":
            if actor.energy >= 3:
                damage = 25
                if target.defending:
                    damage //= 2
                target.hp -= damage
                actor.energy = 0
                target.defending = False
                return f"üí• {actor.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –°–£–ü–ï–†-–£–î–ê–†! –ù–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!"
            else:
                return "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å—É–ø–µ—Ä-—É–¥–∞—Ä–∞."

        elif action == "giveup":
            actor.hp = 0
            return f"üè≥ {actor.name} —Å–¥–∞–µ—Ç—Å—è!"

        return "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    def is_over(self):
        return self.player1.hp <= 0 or self.player2.hp <= 0

    def get_winner(self):
        if self.player1.hp > 0:
            return self.player1
        if self.player2.hp > 0:
            return self.player2
        return None


def render_duel(game: DuelGame):
    p1 = game.player1
    p2 = game.player2
    text = (
        f"üßç‚Äç‚ôÇÔ∏è {p1.name} [HP: {p1.hp}, üîã {p1.energy}]\n"
        f"üßç‚Äç‚ôÇÔ∏è {p2.name} [HP: {p2.hp}, üîã {p2.energy}]\n\n"
        f"üéÆ –•–æ–¥: **{game.get_player(game.current_turn).name}**"
    )
    return text


def register_rp_commands(client_obj):
    for cmd_name in RP_COMMAND_TEMPLATES.keys():
        pattern = rf'^\.{cmd_name}(?:\s|$)'
        client_obj.on(events.NewMessage(pattern=pattern, outgoing=True))(
            lambda event, action_templates=RP_COMMAND_TEMPLATES: rp_command_handler(event, client_obj, action_templates)
        )
def load_nicknames():
    if os.path.exists(NICKNAMES_FILE):
        with open(NICKNAMES_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_nicknames(nicknames_data):
    with open(NICKNAMES_FILE, 'w', encoding='utf-8') as f:
        json.dump(nicknames_data, f, ensure_ascii=False, indent=4)

def get_full_name_and_mention(user_data):
    user_id = user_data['id']
    
    # --- –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
    print(f"DEBUG: Processing user_data for mention: {user_data}")
    # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---

    if user_data.get('username'):
        username = user_data['username']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–Ω–µ–π–º –∏ ID
        return f"@{username} (ID: `{user_id}`)"
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID –∏ ID
        # –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ "–ò–º—è –§–∞–º–∏–ª–∏—è (ID: `12345`)", –Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ ID
        # –î–ª—è —Å–ª—É—á–∞–µ–≤, –≥–¥–µ —é–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂–µ—Ç –∏–º—è.
        return f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id}) (ID: `{user_id}`)"

def format_player_mention(player_data):
    player_id = player_data['id']
    # player_data['name'] –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —É–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å @username, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    # –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞. –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    # —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏ ID.
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ player_data['name'], –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ player_name = "–ò–º—è –§–∞–º–∏–ª–∏—è (@username)"
    username_match = re.search(r'@(\w+)', player_data['name'])

    if username_match:
        username = username_match.group(1)
        return f"@{username} (ID: `{player_id}`)"
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ player_data['name'] –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ,
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID
        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å player_data['name'] –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —É–ø–æ—Ä –Ω–∞ ID
        # –ò–ª–∏ –∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        return f"[{player_data['name']}](tg://user?id={player_id}) (ID: `{player_id}`)"

chat_nicknames = load_nicknames()
online_status_enabled = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á keep_online, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
online_tasks = {}
load_words_games()

# –§—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
def allow_bots_and_users(event):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ,
    –≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞,
    –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.
    """
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª/—á–∞—Ç —Å–∞–º –ø–æ —Å–µ–±–µ
    if event.sender is None:
        return False
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –±–æ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    # (event.sender.bot –±—É–¥–µ—Ç True –¥–ª—è –±–æ—Ç–æ–≤, False –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    return True # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞
load_words_games()

async def info_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–∏–Ω—Ñ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    –í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö ID.
    """
    target_user = None
    input_arg = event.pattern_match.group(1)

    if input_arg:
        try:
            try:
                user_id_int = int(input_arg)
                target_user = await client.get_entity(user_id_int)
            except ValueError:
                target_user = await client.get_entity(input_arg)
        except UsernameInvalidError:
            await event.edit("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        except UserNotMutualContactError:
            await event.edit("–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç).")
            return
        except Exception as e:
            await event.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return
    elif event.is_reply:
        try:
            replied_message = await event.get_reply_message()
            if replied_message and replied_message.sender:
                target_user = await replied_message.get_sender()
            else:
                await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ä–µ–ø–ª–∞–π.")
                return
        except Exception as e:
            await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–ª–∞—è: {e}")
            return
    else:
        target_user = await event.get_sender()

    if not target_user:
        await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    user_id = target_user.id
    username = f"@{target_user.username}" if target_user.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    first_name = target_user.first_name if target_user.first_name else ""
    last_name = target_user.last_name if target_user.last_name else ""
    full_name = f"{first_name} {last_name}".strip() if first_name or last_name else "–ù–µ—Ç –∏–º–µ–Ω–∏"

    has_avatar = False
    try:
        photos = await client.get_profile_photos(target_user, limit=1)
        if photos:
            has_avatar = True
    except Exception:
        pass

    is_premium = "‚úÖ" if getattr(target_user, 'premium', False) else "‚ùé"
    lang_code = getattr(target_user, 'lang_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –°–ö–†–´–¢–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê ---
    if target_user.id in PROTECTED_USER_IDS:
        phone_info = "[!] –°–∫—Ä—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º [!]"
    else:
        phone_number = getattr(target_user, 'phone', None)
        if phone_number:
            phone_info = f"`+{phone_number}`"
        else:
            phone_info = "–°–∫—Ä—ã—Ç"
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    response = (
        f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n"
        f"üëÄ ID: `{user_id}`\n"
        f"üßæ –ò–º—è: `{full_name}`\n"
        f"üíæ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}\n" # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è phone_info
        f"ü§≥ –ê–≤–∞—Ç–∞—Ä–∫–∞: {'–ï—Å—Ç—å' if has_avatar else '–ù–µ—Ç'}\n"
        f"üíé Telegram Premium: `{is_premium}`\n"
        f"üó∫Ô∏è –Ø–∑—ã–∫: `{lang_code}`"
    )

    await event.edit(response)

async def ping_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞.
    """
    start_time = time.time()
    message = await event.edit("üèì Pong!")
    end_time = time.time()
    ping_time = (end_time - start_time) * 1000
    await message.edit(f"üèì Pong!\nüïß –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ping_time:.2f} –º—Å\n\nü§ñ [MorganLP](t.me/sedativine)")

async def love_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .love –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞.
    """
    background_char = '‚ù§Ô∏è'
    heart_char = 'ü§ç'

    heart_template = [
    "  ü§çü§ç   ü§çü§ç  ",
    " ü§çü§çü§çü§ç ü§çü§çü§çü§ç ",
    "ü§çü§çü§çü§çü§çü§çü§çü§çü§çü§çü§ç",
    "ü§çü§çü§çü§çü§çü§çü§çü§çü§çü§çü§ç",
    " ü§çü§çü§çü§çü§çü§çü§çü§çü§ç ",
    "  ü§çü§çü§çü§çü§çü§çü§ç ",
    "   ü§çü§çü§çü§çü§ç  ",
    "    ü§çü§çü§ç   ",
    "     ü§ç    ",
]
    
    square_height = len(heart_template)
    max_template_width = max(len(row) for row in heart_template)
    square_width = max_template_width

    grid = [[background_char for _ in range(square_width)] for _ in range(square_height)]

    def render(g):
        return "\n".join("".join(row) for row in g)

    msg = await event.respond(render(grid))

    coords = []
    for r in range(len(heart_template)):
        for c in range(len(heart_template[r])):
            if heart_template[r][c] == heart_char:
                coords.append((r, c))

    batch_size = 10
    for i in range(0, len(coords), batch_size):
        batch = coords[i:i + batch_size]
        for r, c in batch:
            if 0 <= r < square_height and 0 <= c < square_width:
                grid[r][c] = heart_char
        try:
            await msg.edit(render(grid))
        except FloodWaitError as e:
            print(f"Flood wait {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
        await asyncio.sleep(0.5)

    await asyncio.sleep(0.7)
    await msg.edit(render(grid) + "\n\n–í–∞—à–µ —Å–µ—Ä–¥–µ—á–∫–æ! ‚úÖ")



import os
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont, ImageOps
from datetime import datetime
from telethon import events
import tempfile # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# --- –ù–ê–°–¢–†–û–ô–ö–ê –§–û–ù–û–í–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ---
# –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ñ–æ–Ω–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ü–£–¢–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ï –ü–£–¢–ò –ö –í–ê–®–ò–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú


async def quote_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .—Ü–∏—Ç [–Ω–æ–º–µ—Ä_—Ñ–æ–Ω–∞] –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –í–∫–ª—é—á–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–≤–∞—Ç–∞—Ä–∫—É, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è.
    """
    if not event.is_reply:
        await event.edit("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.—Ü–∏—Ç [–Ω–æ–º–µ—Ä_—Ñ–æ–Ω–∞]` –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ü–∏—Ç–∞—Ç—É.")
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é ---
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .—Ü–∏—Ç [–∞—Ä–≥—É–º–µ–Ω—Ç]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.match –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–æ–º —Å—Ç—Ä–æ–∫–∏
    import re
    command_pattern = re.compile(r'^\.(?:—Ü–∏—Ç)\s*(\S*)$') # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    match = command_pattern.match(event.text)

    background_arg = None
    if match:
        # match.group(1) –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ ".—Ü–∏—Ç " (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2" –∏–ª–∏ "" –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ ".—Ü–∏—Ç")
        potential_arg = match.group(1)
        if potential_arg: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            background_arg = potential_arg
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    selected_background_path = DEFAULT_BACKGROUND_PATH
    feedback_message = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ü–∏—Ç–∞—Ç—É..."

    if background_arg:
        try:
            background_number = int(background_arg)
            if background_number in BACKGROUND_IMAGES:
                selected_background_path = BACKGROUND_IMAGES[background_number]
                feedback_message = f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ü–∏—Ç–∞—Ç—É —Å —Ñ–æ–Ω–æ–º ‚Ññ{background_number}..."
            else:
                available_numbers = ", ".join(map(str, sorted(BACKGROUND_IMAGES.keys())))
                await event.edit(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ–Ω–∞: `{background_number}`. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã: {available_numbers}."
                    f"\n–ò—Å–ø–æ–ª—å–∑—É—é —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
                )
                await asyncio.sleep(3) # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        except ValueError:
            available_numbers = ", ".join(map(str, sorted(BACKGROUND_IMAGES.keys())))
            await event.edit(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ñ–æ–Ω–∞: `{background_arg}`. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ."
                f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã: {available_numbers}."
                f"\n–ò—Å–ø–æ–ª—å–∑—É—é —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            await asyncio.sleep(3) # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    await event.edit(feedback_message)

    try:
        replied_message = await event.get_reply_message()
        if not replied_message or not replied_message.text:
            await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        quote_text = replied_message.text
        
        sender_display_name = None
        if replied_message.sender:
            if replied_message.sender.username:
                sender_display_name = f"@{replied_message.sender.username}"
            elif replied_message.sender.first_name and replied_message.sender.last_name:
                sender_display_name = f"{replied_message.sender.first_name} {replied_message.sender.last_name}"
            elif replied_message.sender.first_name:
                sender_display_name = replied_message.sender.first_name


        message_time = replied_message.date.strftime("%d.%m.%Y %H:%M")

        img_width = 800
        img_height = 450
        
        background_image_path = selected_background_path
        
        text_color = (255, 255, 255)
        info_color = (200, 200, 200)
        
        padding_x_content = 50 
        padding_y = 50

        try:
            background_img = Image.open(background_image_path).convert("RGBA")
            background_img = ImageOps.fit(background_img, (img_width, img_height), Image.Resampling.LANCZOS)
            overlay = Image.new('RGBA', background_img.size, (0, 0, 0, 128))
            img = Image.alpha_composite(background_img, overlay)
            img = img.convert("RGB")
        except FileNotFoundError:
            print(f"–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {background_image_path}. –ò—Å–ø–æ–ª—å–∑—É—é —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω.")
            img = Image.new('RGB', (img_width, img_height), color=(0, 0, 0))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}. –ò—Å–ø–æ–ª—å–∑—É—é —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω.")
            img = Image.new('RGB', (img_width, img_height), color=(0, 0, 0))
            
        d = ImageDraw.Draw(img)

        # --- –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ ---
        font_families = {
            'quote_bold': [
                "arialbd.ttf", # Windows
                "Arial Bold.ttf", # macOS common
                "DejaVuSans-Bold.ttf", # Linux common
                "LiberationSans-Bold.ttf", # Another Linux common
                "NotoSans-Bold.ttf" # Good general purpose if available
            ],
            'info_regular': [
                "arial.ttf", # Windows
                "Arial.ttf", # macOS common
                "DejaVuSans.ttf", # Linux common
                "LiberationSans-Regular.ttf", # Another Linux common
                "NotoSans-Regular.ttf" # Good general purpose if available
            ]
        }

        font_dirs = [
            "C:/Windows/Fonts/", # Windows
            "/System/Library/Fonts/", # macOS
            "/Library/Fonts/", # macOS
            "/usr/share/fonts/truetype/", # Linux
            "/usr/local/share/fonts/" # Linux
        ]

        def find_font_path(font_name):
            for font_dir in font_dirs:
                full_path = os.path.join(font_dir, font_name)
                if os.path.exists(full_path):
                    return full_path
            return None

        def load_best_font(font_family_list, default_size):
            for font_name in font_family_list:
                font_path = find_font_path(font_name)
                if font_path:
                    try:
                        return ImageFont.truetype(font_path, default_size)
                    except IOError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞ {font_path}: {e}")
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É—é —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Pillow (—Ä–∞–∑–º–µ—Ä {default_size}).")
            return ImageFont.load_default(size=default_size)

        # Attempt to load fonts
        quote_font = load_best_font(font_families['quote_bold'], 40)
        info_font = load_best_font(font_families['info_regular'], 25)

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã ---
        max_text_width = img_width - 2 * padding_x_content 
        
        wrapped_lines = []
        words = quote_text.split(' ')
        current_line_words = []
        for word in words:
            test_line = ' '.join(current_line_words + [word])
            if quote_font.getlength(test_line) <= max_text_width:
                current_line_words.append(word)
            else:
                wrapped_lines.append(' '.join(current_line_words))
                current_line_words = [word]
        wrapped_lines.append(' '.join(current_line_words))
        wrapped_text = "\n".join(wrapped_lines)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã
        bbox_quote = d.textbbox((0,0), wrapped_text, font=quote_font, align="center")
        quote_w = bbox_quote[2] - bbox_quote[0]
        quote_h = bbox_quote[3] - bbox_quote[1]

        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ ---
        info_lines = []
        if sender_display_name:
            info_lines.append(sender_display_name)
        info_lines.append(message_time)
        info_text = "\n".join(info_lines)

        bbox_info = d.textbbox((0,0), info_text, font=info_font)
        info_h = bbox_info[3] - bbox_info[1]

        # --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
        
        # –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avatar_size = 90
        avatar_x = padding_x_content 
        avatar_y = padding_y

        avatar_temp_file = BytesIO()
        try:
            photos = await client.get_profile_photos(replied_message.sender, limit=1)
            if photos:
                await client.download_media(photos[0], file=avatar_temp_file)
                avatar_temp_file.seek(0)
                avatar_img = Image.open(avatar_temp_file).convert("RGBA")
                avatar_img = avatar_img.resize((avatar_size, avatar_size), Image.Resampling.LANCZOS)

                mask = Image.new("L", avatar_img.size, 0)
                draw_mask = ImageDraw.Draw(mask)
                draw_mask.ellipse((0, 0, avatar_size, avatar_size), fill=255)
                
                rounded_avatar = ImageOps.fit(avatar_img, mask.size, centering=(0.5, 0.5))
                rounded_avatar.putalpha(mask)

                img.paste(rounded_avatar, (avatar_x, avatar_y), rounded_avatar)

        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {e}")
            pass

        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–º–µ–Ω–∏/–≤—Ä–µ–º–µ–Ω–∏ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏)
        info_block_center_y = avatar_y + avatar_size / 2
        info_y = info_block_center_y - info_h / 2
        
        info_x = avatar_x + avatar_size + 20 
        
        d.text((info_x, info_y), info_text, font=info_font, fill=info_color)

        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã (–ø–æ —Ü–µ–Ω—Ç—Ä—É, –Ω–∏–∂–µ –±–ª–æ–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π)
        top_of_info_block = min(avatar_y, info_y) if sender_display_name else avatar_y
        bottom_of_info_block = max(avatar_y + avatar_size, info_y + info_h) if sender_display_name else (avatar_y + avatar_size)

        quote_start_y_area = bottom_of_info_block + 15 

        available_height_for_quote = img_height - quote_start_y_area - padding_y 
        
        quote_y = quote_start_y_area + (available_height_for_quote - quote_h) / 2
        
        # –ü–æ–∑–∏—Ü–∏—è X –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã (–ø–æ —Ü–µ–Ω—Ç—Ä—É, –Ω–æ relative to padding_x_content)
        quote_x = padding_x_content + (max_text_width - quote_w) / 2
        
        d.text((quote_x, quote_y), wrapped_text, font=quote_font, fill=text_color, align="center")

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
        temp_file_path = None 

        try:
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
                img.save(temp_file.name, 'PNG')
                temp_file_path = temp_file.name 

            await client.send_file(
                event.chat_id,
                temp_file_path, 
                caption="‚úÖ –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞:",
                force_document=False 
            )

        except Exception as e:
            await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: {e}")
            import traceback
            traceback.print_exc()
        finally:
            if temp_file_path and os.path.exists(temp_file_path):
                os.remove(temp_file_path)
                print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file_path}")

    except Exception as e:
        await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
        import traceback
        traceback.print_exc()

async def cat_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–∫–æ—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—à–∫–∏.
    """
    await event.edit("–ò—â—É –∫–æ—Ç–∏–∫–∞...")
    try:
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get("https://api.thecatapi.com/v1/images/search")
            response.raise_for_status()
            data = response.json()
            if data and len(data) > 0 and 'url' in data[0]:
                cat_image_url = data[0]['url']
                await client.send_file(event.chat_id, cat_image_url, caption="–í–∞—à –∫–æ—Ç–∏–∫!")
                
            else:
                await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except httpx.HTTPStatusError as e:
        await event.edit(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e.response.status_code}")
    except httpx.RequestError as e:
        await event.edit(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")
    except Exception as e:
        await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏–∫–∞: {e}")

async def dog_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .—Å–æ–±–∞—á–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–±–∞–∫–∏.
    """
    await event.edit("–ò—â—É —Å–æ–±–∞—á–∫—É...")
    try:
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get("https://dog.ceo/api/breeds/image/random")
            response.raise_for_status()
            data = response.json()
            if data and data.get('status') == 'success' and 'message' in data:
                dog_image_url = data['message']
                await client.send_file(event.chat_id, dog_image_url, caption="–í–∞—à–∞ —Å–æ–±–∞—á–∫–∞!")
                
            else:
                await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except httpx.HTTPStatusError as e:
        await event.edit(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞—á–∫–∏: {e.response.status_code}")
    except httpx.RequestError as e:
        await event.edit(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞—á–∫–∏: {e}")
    except Exception as e:
        await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±–∞—á–∫–∏: {e}")

async def add_user_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if event.is_private:
        await event.edit("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö.")
        return

    input_arg = event.pattern_match.group(1)
    if not input_arg:
        await event.edit("üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .–¥–æ–±–∞–≤–∏—Ç—å [—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è].")
        return

    await event.edit(f"‚úÖ –ü—ã—Ç–∞—é—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {input_arg}...")
    target_user_entity = None
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ ID
        try:
            user_id_int = int(input_arg)
            target_user_entity = await client.get_entity(user_id_int)
        except ValueError:
            target_user_entity = await client.get_entity(input_arg)
    except UsernameInvalidError:
        await event.edit("‚õî –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    except Exception as e:
        await event.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return

    if not target_user_entity:
        await event.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        chat = await event.get_chat()

        # CORRECTED: Use client(InviteToChannelRequest) for inviting users
        # The target_user_entity needs to be a list for InviteToChannelRequest
        await client(InviteToChannelRequest(
            channel=chat,
            users=[target_user_entity]
        ))
        
        await event.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{target_user_entity.first_name}](tg://user?id={target_user_entity.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
    except ChatAdminRequiredError:
        await event.edit("üö´ –û—à–∏–±–∫–∞: –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
    except UserPrivacyRestrictedError:
        await event.edit("üö´ –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")
    except PeerFloodError:
        await event.edit("üö´ –û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    except UserNotMutualContactError:
        await event.edit("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –∏–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")
    except FloodWaitError as e:
        await event.edit(f"üö´ –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.seconds) # –ñ–¥–µ–º, –µ—Å–ª–∏ Telethon –ø—Ä–æ—Å–∏—Ç
    except Exception as e:
        await event.edit(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc() # This will print the full traceback to your console

async def fire_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–æ–≥–æ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ASCII-–∞—Ä—Ç–∞ –æ–≥–Ω—è.
    """
    await event.edit("–ó–∞–∂–∏–≥–∞—é –æ–≥–æ–Ω—å üî•...")

    fire_frames = [
        """
üî•
""",
        """
  üî•
 üî•üî•
""",
        """
  üî•
 üî•üî•
üî•üî•üî•
""",
        """
  üî•
 üî•üî•üî•
üî•üî•üî•üî•
""",
        """
    üî•
  üî•üî•
 üî•üî•üî•
üî•üî•üî•üî•
""",
        """
    üî•
  üî•üî•
 üî•üî•üî•
üî•üî•üî•üî•üî•
""",
        """
    üî•
   üî•üî•
  üî•üî•üî•
 üî•üî•üî•üî•üî•
""",
        """
    üî•
   üî•üî•
  üî•üî•üî•
 üî•üî•üî•üî•üî•
üî•üî•üî•üî•üî•üî•
""",
        """
      üî•
    üî•üî•
   üî•üî•üî•
  üî•üî•üî•üî•
 üî•üî•üî•üî•üî•
üî•üî•üî•üî•üî•üî•
""",
        """
      üî•
     üî•üî•
    üî•üî•üî•
   üî•üî•üî•üî•
  üî•üî•üî•üî•üî•
  üî•üî•üî•üî•üî•üî•
üî•üî•üî•üî•üî•üî•
""",
        """
        üî•
      üî•üî•
     üî•üî•üî•
    üî•üî•üî•üî•
   üî•üî•üî•üî•üî•
  üî•üî•üî•üî•üî•üî•
 üî•üî•üî•üî•üî•üî•üî•
üî•üî•üî•üî•üî•üî•üî•üî•
"""
    ]

    msg = await event.edit(fire_frames[0].strip())

    num_loops = 3 
    for _ in range(num_loops):
        for i, frame in enumerate(fire_frames):
            current_frame_content = frame.strip()

            # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –º–∞—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –¥–∞–∂–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞–¥—Ä—ã –±—ã–ª–∏ —Ä–∞–∑–Ω—ã–º–∏ –¥–ª—è API
            unique_content = f"{current_frame_content}\n` {i % 2}`" 

            try:
                if msg.text != unique_content: 
                    await msg.edit(unique_content)
                else:
                    await msg.edit(f"{current_frame_content}\n` {time.time()}`") 

                await asyncio.sleep(0.15) 
            except FloodWaitError as e:
                print(f"Flood wait {e.seconds} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–≥–Ω—è")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–≥–Ω—è: {e}")
                break
        await asyncio.sleep(0.5) 

    await msg.edit("üî• **–û–≥–æ–Ω—å –ø–æ—Ç—É—à–µ–Ω!** üî•")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async def calculator_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
    """
    expression = event.pattern_match.group(1)
    if not expression:
        await event.edit("‚õî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `.–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ]`\n–ü—Ä–∏–º–µ—Ä: .–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2+2*3")
        return

    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É like `numexpr` –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π eval –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–æ –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥.
        result = eval(expression)
        await event.edit(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: `{expression}` = `{result}`")
    except SyntaxError:
        await event.edit("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")
    except NameError:
        await event.edit("‚ùå –û—à–∏–±–∫–∞: –í—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏.")
    except Exception as e:
        await event.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {e}")

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: –ü–æ–≥–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Wttr.in –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
async def weather_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–ø–æ–≥–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ —Å Wttr.in –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    city = event.pattern_match.group(1)
    if not city:
        await event.edit("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥]`\n–ü—Ä–∏–º–µ—Ä: .–ø–æ–≥–æ–¥–∞ –ö–∏–µ–≤")
        return

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ '+' –¥–ª—è URL, –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É (Wttr.in –µ—ë –ø–æ–Ω–∏–º–∞–µ—Ç)
    city_encoded = city.replace(" ", "+") 

    await event.edit(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –≤ {city} —Å Wttr.in...")
    try:
        async with httpx.AsyncClient() as http_client:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
            # ?.png –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, &lang=ru –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, &0 –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
            url_png = f"https://wttr.in/{city_encoded}_0.png?lang=ru&0" # –î–æ–±–∞–≤–ª–µ–Ω _0 –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ

            response_png = await http_client.get(url_png, follow_redirects=True)
            response_png.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ HTTP

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if 'image' in response_png.headers.get('Content-Type', ''):
                img_bytes = BytesIO(response_png.content)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª
                await client.send_file(event.chat_id, img_bytes, caption=f"‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –≤ {city} (Wttr.in)", file_name="weather.png")
                await event.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É..."
            else:
                # –ï—Å–ª–∏ wttr.in –≤–µ—Ä–Ω—É–ª –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                text_url = f"https://wttr.in/{city_encoded}?lang=ru&0"
                text_response = await http_client.get(text_url, follow_redirects=True)
                text_response.raise_for_status()
                weather_text_fallback = text_response.text

                if "Unknown location" in weather_text_fallback or "Sorry, we don't have weather data for" in weather_text_fallback:
                    await event.edit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: `{city}`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                else:
                    await event.edit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, wttr.in –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ:\n```\n{weather_text_fallback}\n```")


    except httpx.HTTPStatusError as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã —Å Wttr.in: {e.response.status_code}")
    except httpx.RequestError as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã —Å Wttr.in: {e}")
    except Exception as e:
        await event.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã —Å Wttr.in: {e}")
        import traceback
        traceback.print_exc()




async def chat_info_handler(event, client, session_name):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .—á–∞—Ç–∏–Ω—Ñ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.
    """
    
    print(f"[{session_name}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .—á–∞—Ç–∏–Ω—Ñ–æ –≤ —á–∞—Ç–µ {event.peer_id}.")
    
    status_message = await event.reply("‚è≥ –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ...")

    try:
        chat = await event.get_chat()
        chat_id = chat.id
        chat_title = chat.title
        chat_type = "–ö–∞–Ω–∞–ª" if event.is_channel else "–ì—Ä—É–ø–ø–∞"
        
        participants_count = await client.get_participants(chat, limit=0)
        
        link = f"https://t.me/{chat.username}" if chat.username else "–ù–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"

        admin_list = []
        try:
            async for participant in client.iter_participants(chat, filter=ChannelParticipantsAdmins):
                
                user_obj = None
                if isinstance(participant, (ChannelParticipantCreator, ChannelParticipantAdmin)):
                    user_obj = participant.user
                elif isinstance(participant, User):
                    user_obj = participant
                else:
                    try:
                        user_obj = await client.get_entity(participant.id)
                    except Exception as e:
                        print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_obj –¥–ª—è {participant.id}: {e}")
                        continue
                        
                if user_obj:
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ first_name
                    admin_display_name = f"@{user_obj.username}" if user_obj.username else user_obj.first_name
                    if user_obj.last_name and not user_obj.username: # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞
                        admin_display_name += f" {user_obj.last_name}"
                    
                    admin_status = ""
                    if isinstance(participant, ChannelParticipantCreator):
                        admin_status = " (–°–æ–∑–¥–∞—Ç–µ–ª—å)"
                    elif isinstance(participant, ChannelParticipantAdmin) and participant.rank:
                        admin_status = f" ({participant.rank})"
                    elif isinstance(participant, ChannelParticipantAdmin):
                        admin_status = " (–ê–¥–º–∏–Ω)"
                    
                    admin_list.append(
                        f"‚Ä¢ {admin_display_name} | ID: `{user_obj.id}`{admin_status} {'[–ë–æ—Ç]' if user_obj.bot else '[–ê–¥–º–∏–Ω]'}"
                    )

        except ChatAdminRequiredError:
            admin_list.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—é–∑–µ—Ä–±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ).")
        except Exception as e:
            admin_list.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e} (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —é–∑–µ—Ä–±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º).")
            print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {chat_title} ({chat_id}): {e}")

        admins_str = "\n".join(admin_list) if admin_list else "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å."

        response_message = (
            f"**üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n"
            f"**‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ:** `{chat_title}`\n"
            f"**üíæ ID —á–∞—Ç–∞:** `{chat_id}`\n"
            f"**üí¨ –¢–∏–ø:** `{chat_type}`\n"
            f"**üóÉÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{participants_count.total}`\n"
            f"**üîó –°—Å—ã–ª–∫–∞:** {link}\n\n"
            f"**üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n{admins_str}"
        )

        await status_message.edit(response_message)
        print(f"[{session_name}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {chat_title} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    except Exception as e:
        print(f"[{session_name}] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ chat_info_handler –¥–ª—è —á–∞—Ç–∞ {event.peer_id}: {e}")
        await status_message.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .–∏–≥–Ω–æ—Ä–∞ –∏ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---

from telethon import Button
from telethon.tl.types import User, Channel, Chat

# Global cache to store the full unread messages for each user
full_unread_messages_cache = {}

async def ignore_handler(event, client):
    """
    Counts and reports the number of unread chats, including those with mentions.
    This version reports the count and provides instructions to use a new command.
    """
    print("Executing ignore_handler...") # Debugging output
    try:
        unread_chats = []

        async for dialog in client.iter_dialogs():
            if dialog.unread_count > 0 or dialog.unread_mentions_count > 0:
                unread_chats.append(dialog)

        unread_count = len(unread_chats)
        print(f"Found {unread_count} unread chats.") # Debugging output

        if unread_count > 0:
            response_message_short = (
                f"‚ÅâÔ∏è–£ –≤–∞—Å **{unread_count}** –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                f"‚ÄºÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `.–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å—á–∞—Ç—ã`."
            )

            response_message_full = "üìú **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:**\n\n"
            if unread_chats:
                for dialog in unread_chats:
                    title = dialog.title if dialog.title else "–°–∫—Ä—ã—Ç—ã–π —á–∞—Ç"
                    try:
                        if isinstance(dialog.entity, User):
                            chat_link = f"tg://user?id={dialog.entity.id}"
                        elif isinstance(dialog.entity, (Channel, Chat)):
                            if dialog.entity.username:
                                chat_link = f"https://t.me/{dialog.entity.username}"
                            else:
                                # For private chats (without a username), use tg://resolve?domain=c<chat_id>
                                chat_link = f"tg://resolve?domain=c{abs(dialog.entity.id)}"
                        else:
                            chat_link = title # If chat type is not defined, just use the title

                        response_message_full += (
                            f"- [{title}]({chat_link}) "
                            f"(–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {dialog.unread_count}, –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {dialog.unread_mentions_count})\n"
                        )
                    except Exception as e:
                        response_message_full += (
                            f"- {title} (–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {dialog.unread_count}, –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {dialog.unread_mentions_count}) "
                            f"- –û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏ ({e})\n"
                        )
            else:
                response_message_full += "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."

            # Send the short message to the chat
            await client.send_message(
                entity=event.chat_id, # Send to the same chat where the command was issued
                message=response_message_short
            )
            print("Unread count message sent successfully with instructions.") # Debugging output

            # Store the full message in the temporary cache.
            global full_unread_messages_cache
            full_unread_messages_cache[event.sender_id] = response_message_full

        else:
            await client.send_message(event.chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤. üéâ")
            print("No unread chats message sent.") # Debugging output

    except Exception as e:
        print(f"Error in ignore_handler: {e}") # Debugging output for error
        await client.send_message(event.chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

# This function handles the new command to send the full list to "Saved Messages"
async def show_chats_command_handler(event, client):
    """
    Sends the full list of unread chats to the user's "Saved Messages" (–ò–∑–±—Ä–∞–Ω–Ω–æ–µ).
    """
    print("Executing show_chats_command_handler...") # Debugging output
    sender_id = event.sender_id

    global full_unread_messages_cache
    if sender_id in full_unread_messages_cache:
        full_message = full_unread_messages_cache[sender_id]

        try:
            # Get the "Saved Messages" entity ('me' always points to "Saved Messages")
            saved_messages_entity = await client.get_entity('me')
            await client.send_message(saved_messages_entity, full_message, link_preview=False) # Send the message
            await event.reply("–°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚úÖ") # Confirm sending in the original chat

            # Clear the cache after sending to avoid storing old data
            del full_unread_messages_cache[sender_id]
        except Exception as e:
            await event.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            import traceback
            traceback.print_exc()
    else:
        await event.reply("‚õî –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .–∏–≥–Ω–æ—Ä.")

import re  # –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª

import re
import time  # –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

async def ai_handler(event, client):
    """
    –ö–æ–º–∞–Ω–¥–∞ /ai [–≤–æ–ø—Ä–æ—Å] ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é Mistral AI (–±–µ–∑ –ø–∞–º—è—Ç–∏), —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    prompt = event.text.split(" ", 1)
    if len(prompt) < 2 or not prompt[1].strip():
        await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai")
        return

    question = prompt[1].strip()
    thinking_msg = await event.reply("ü§ñ –ü—Ä–∏–Ω—è–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..")

    # üîç –û—Ç–≤–µ—Ç –Ω–∞ "–∫—Ç–æ —Ç—ã?"
    if re.search(r"\b(–∫—Ç–æ\s+—Ç—ã|—á—Ç–æ\s+—Ç—ã\s+—Ç–∞–∫–æ–µ|—Ç—ã\s+–∫—Ç–æ|—Ç—ã\s+—á—Ç–æ)\b", question.lower()):
        await thinking_msg.edit("–ü—Ä–∏–≤–µ—Ç! –Ø - —É–º–Ω—ã–π –Æ–∑–µ—Ä–ë–æ—Ç. –£ –º–µ–Ω—è –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –ú–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @sedativine. –ï—Å–ª–∏ –∏–º–µ—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, —è —Ç–µ–±—è —Å–ª—É—à–∞—é!")
        return

    try:
        start = time.time()
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {MISTRAL_API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": "mistral-tiny",
                "messages": [
                    {"role": "user", "content": question}
                ]
            }
            async with session.post("https://api.mistral.ai/v1/chat/completions", headers=headers, json=data) as resp:
                resp.raise_for_status()
                res_json = await resp.json()
        end = time.time()

        reply = res_json["choices"][0]["message"]["content"]
        usage = res_json.get("usage", {})
        prompt_tokens = usage.get("prompt_tokens", "‚Äî")
        completion_tokens = usage.get("completion_tokens", "‚Äî")
        total_tokens = usage.get("total_tokens", "‚Äî")
        elapsed_ms = int((end - start) * 1000)

        final_msg = (
            f"{reply}\n\n"
            f"üß† –û—Ç–≤–µ—Ç –∑–∞ {elapsed_ms}–º—Å\nüî¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens} "
        )

        await thinking_msg.edit(final_msg)

    except aiohttp.ClientResponseError as e:
        await thinking_msg.edit(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e.status}")
    except Exception as e:
        await thinking_msg.edit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {e}")


async def test_button_handler(event, client):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã inline-–∫–Ω–æ–ø–æ–∫.
    """
    print("Executing test_button_handler...") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    try:
        await event.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        buttons = [
            Button.inline("–ù–∞–∂–º–∏ –º–µ–Ω—è!", data="test_data_123"),
            Button.url("Google", "https://google.com")
        ]

        await client.send_message(
            event.chat_id,
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:",
            buttons=buttons
        )
        print("Test message with buttons sent successfully.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    except Exception as e:
        print(f"Error in test_button_handler: {e}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
        import traceback
        traceback.print_exc()

async def test_button_callback(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π inline-–∫–Ω–æ–ø–∫–∏.
    """
    print(f"Test button callback received: {event.data.decode()}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    await event.answer("–¢—ã –Ω–∞–∂–∞–ª —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É!", alert=True) # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# --- –í–∞—à help_handler (–∑–∞–º–µ–Ω–∏—Ç–µ –∏–º —Ç–µ–∫—É—â–∏–π) ---
async def help_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–ø–æ–º–æ—â—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    """
    # –ó–¥–µ—Å—å –º—ã –Ω–µ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    # –ï—Å–ª–∏ –≤—ã –≤—Å–µ –∂–µ —Ö–æ—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–µ–¥–µ—Ç –Ω–∞ help_handler_page2,
    # —Ç–æ –∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç—É —á–∞—Å—Ç—å:
    buttons = [
        Button.inline("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚û°Ô∏è", data="go_to_help_page_2_via_button")
    ]
    await event.edit(HELP_TEXT_PAGE_1, buttons=buttons, link_preview=False)


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .–ø–æ–º–æ—â—å2 ---
async def help_handler_page2(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .–ø–æ–º–æ—â—å2 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    """
    await event.edit(HELP_TEXT_PAGE_2, link_preview=False)

from PIL import Image, ImageDraw, ImageFont
import os

async def generate_image_handler(event, client):
    args = event.raw_text.split(" ", 1)
    prompt = args[1] if len(args) > 1 else "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ
    msg = await event.respond("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é...")

    try:
        image_url = await(prompt)

        if image_url:
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as resp:
                    img_bytes = await resp.read()

            await client.send_file(event.chat_id, BytesIO(img_bytes), caption=f"üñº –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}", file_name="gen.png")
        else:
            await msg.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except Exception as e:
        await msg.edit(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


# --- –ò –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –∏–∑ .–ø–æ–º–æ—â—å –≤—Å–µ –∂–µ —Ä–∞–±–æ—Ç–∞–ª–∞, –≤–∞–º –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–µ ---
async def go_to_help_page_2_via_button_callback(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–º–æ—â–∏.
    """
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å help_handler_page2, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    await help_handler_page2(event, client)

async def wiki_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .wiki –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Wikipedia.
    """
    query = event.pattern_match.group(1)
    if not query:
        await event.edit("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.wiki <–∑–∞–ø—Ä–æ—Å>`")
        return

    await event.edit(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ Wikipedia –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{query}`...")
    try:
        async with httpx.AsyncClient(timeout=10.0) as http_client:
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            search_url = "https://ru.wikipedia.org/w/api.php"
            search_params = {
                "action": "opensearch",
                "search": query,
                "limit": "1",
                "namespace": "0",
                "format": "json"
            }
            search_response = await http_client.get(search_url, params=search_params)
            search_response.raise_for_status()
            search_data = search_response.json()

            if not search_data[1]: # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                await event.edit(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É `{query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ Wikipedia.")
                return

            page_title = search_data[1][0]
            page_url = search_data[3][0]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            summary_url = "https://ru.wikipedia.org/w/api.php"
            summary_params = {
                "action": "query",
                "format": "json",
                "prop": "extracts",
                "exintro": True,  # –¢–æ–ª—å–∫–æ –≤–≤–µ–¥–µ–Ω–∏–µ
                "explaintext": True, # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML
                "titles": page_title,
                "exsentences": "3" # –¢–æ–ª—å–∫–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            }
            summary_response = await http_client.get(summary_url, params=summary_params)
            summary_response.raise_for_status()
            summary_data = summary_response.json()

            page_id = list(summary_data['query']['pages'].keys())[0]
            extract = summary_data['query']['pages'][page_id].get('extract', '–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
            if len(extract) > 800: # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                extract = extract[:797] + "..."

            response_message = (
                f"üìö **Wikipedia: {page_title}**\n\n"
                f"{extract}\n\n"
                f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {page_url}"
            )
            await event.edit(response_message, link_preview=False) # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏

    except httpx.HTTPStatusError as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Wikipedia: {e.response.status_code}")
    except httpx.RequestError as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Wikipedia: {e}")
    except json.JSONDecodeError:
        await event.edit("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Wikipedia.")
    except Exception as e:
        await event.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Wikipedia: {e}")
        import traceback
        traceback.print_exc()

async def botinfo_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .botinfo –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–∑–µ—Ä–±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.
    """

    message = (
        f"ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ:**\n"
        f"‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ: MorganLP\n"
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: @sedativine\n"
        f"üõ†Ô∏è –í–µ—Ä—Å–∏—è: Beta\n" # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
        f"üí° –û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —é–∑–µ—Ä–±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫: .–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, .—á–∞—Ç–∏–Ω—Ñ–æ, .–ø–æ–≥–æ–¥–∞, –∏ –¥—Ä. (–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ - .–ø–æ–º–æ—â—å)"
    )
    await event.edit(message)

# --- –ò–ì–†–ê "–°–õ–û–í–ê" ---

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞–≤–µ—Ä—Ö –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
# active_words_games = {} # {chat_id: {'organizer_id': int, 'players': [], 'current_player_index': int, 'last_word': str, 'used_words': [], 'game_id': str}}

import uuid


# Assuming these are defined elsewhere in your actual code

# Assuming these are defined elsewhere in your actual code

# Import necessary Telethon types for buttons
from telethon import Button
from telethon.tl.types import ReplyInlineMarkup, KeyboardButtonCallback


async def start_words_game_setup(event, client):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã '–°–ª–æ–≤–∞'."""
    chat_id = str(event.chat_id)
    organizer_id = event.sender_id

    # Safely get the organizer's name
    if event.sender: # Check if sender exists
        organizer_name = event.sender.first_name
    else:
        # Fallback if event.sender is None (e.g., channel post, service message)
        # You might want to log this or handle it based on your bot's logic
        print(f"WARNING: event.sender is None for chat {chat_id}, sender_id {organizer_id}")
        organizer_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" # Default name
        # Alternatively, you could return here if you only want user-initiated commands
        # await client.send_message(event.chat_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        # return


    print(f"DEBUG: .—Å–ª–ø–æ–¥–±–æ—Ä received in chat {chat_id} by {organizer_name} ({organizer_id})")

    if chat_id in active_words_games:
        if active_words_games[chat_id]['organizer_id'] == organizer_id:
            await client.send_message(event.chat_id, "‚õî –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ –≤–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .—Å–ª—Å—Ç–∞—Ä—Ç, –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã.")
        else:
            await client.send_message(event.chat_id, "‚ùé –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        return

    game_id = str(uuid.uuid4()) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–≥—Ä—ã
    active_words_games[chat_id] = {
        'organizer_id': organizer_id,
        'organizer_name': organizer_name,
        'players': [{'id': organizer_id, 'name': organizer_name, 'words_count': 0}],
        'current_player_index': 0,
        'last_word': '',
        'used_words': [],
        'state': 'setup',
        'game_id': game_id
    }
    save_words_games(active_words_games)

    organizer_mention = format_player_mention({'id': organizer_id, 'name': organizer_name})

    await client.send_message(
        event.chat_id,
        f"**‚úÖ –ò–≥—Ä–∞ '–°–ª–æ–≤–∞ (–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É)'**: –ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—á–∞—Ç!\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer_mention}\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ .—Å–ª–≤–æ–π—Ç–∏"
    )
    print(f"DEBUG: Game setup started in chat {chat_id} by {organizer_name}. Game ID: {game_id}")

async def join_words_game(event, client):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ '–°–ª–æ–≤–∞'."""
    chat_id = str(event.chat_id)
    player_id = event.sender_id
    player_name = event.sender.first_name if event.sender.first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    if event.sender.username:
        player_name += f" (@{event.sender.username})"

    print(f"[{datetime.now()}] DEBUG: .—Å–ª–≤–æ–π—Ç–∏ received in chat {chat_id} by {player_name} ({player_id})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "setup"
    if chat_id not in active_words_games or active_words_games[chat_id]['state'] != 'setup':
        # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —Ç–µ–∫—É—â–∏–º –∏–≥—Ä–æ–∫–æ–º –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
        print(f"[{datetime.now()}] DEBUG: No active setup in chat {chat_id} for .—Å–ª–≤–æ–π—Ç–∏. Starting new game setup.")
        game_id = str(uuid.uuid4())
        active_words_games[chat_id] = {
            'organizer_id': player_id, # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
            'organizer_name': player_name,
            'players': [], # –ù–∞—á–Ω–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            'current_player_index': 0,
            'last_word': '',
            'used_words': [],
            'state': 'setup',
            'game_id': game_id
        }
        save_words_games(active_words_games)
        
        # Use the new helper for player/organizer mention
        organizer_mention = format_player_mention({'id': player_id, 'name': player_name})
        
        await client.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–¥–±–æ—Ä–∞
            event.chat_id,
            f"**üì£ –ò–≥—Ä–∞ '–°–ª–æ–≤–∞ (–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É)'**: –ü–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π .—Å–ª–≤–æ–π—Ç–∏!\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer_mention}\n"
            f"–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ. –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—Å–∞–≤ `.—Å–ª–≤–æ–π—Ç–∏`."
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        active_words_games[chat_id]['players'].append({'id': player_id, 'name': player_name, 'words_count': 0})
        save_words_games(active_words_games)
        print(f"[{datetime.now()}] DEBUG: Player {player_name} joined (as organizer) game {game_id} in chat {chat_id}.")
        return # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            
    game_data = active_words_games[chat_id]
    if any(p['id'] == player_id for p in game_data['players']):
        await event.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await client.send_message(event.chat_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
        print(f"[{datetime.now()}] DEBUG: Player {player_name} already in game {game_data['game_id']}.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º 'words_count' –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    game_data['players'].append({'id': player_id, 'name': player_name, 'words_count': 0})
    save_words_games(active_words_games) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # Use the new helper for formatting all player names
    player_mentions = [format_player_mention(p) for p in game_data['players']]
    player_list_str = ", ".join(player_mentions)
    
    # Use the new helper for the joining player
    joining_player_mention = format_player_mention({'id': player_id, 'name': player_name})

    await client.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
        event.chat_id,
        f"üéâ {joining_player_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–∫–∏: {player_list_str}"
    )
    print(f"[{datetime.now()}] DEBUG: Player {player_name} joined game {game_data['game_id']} in chat {chat_id}.")


async def generate_image_by_prompt(prompt: str) -> str:
    # Placeholder for Replicate API call
    # You would need to define 'replicate' object and its 'run' method
    # For this example, we'll just return a dummy URL.
    print(f"DEBUG: Generating image for prompt: '{prompt}' (Replicate call placeholder)")
    return "https://example.com/generated_image.jpg"


async def return_to_words_game(event, client):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É '–°–ª–æ–≤–∞', –µ—Å–ª–∏ –æ–Ω —Ä–∞–Ω–µ–µ –≤—ã—à–µ–ª."""
    chat_id = str(event.chat_id)
    player_id = event.sender_id
    player_name = event.sender.first_name

    if chat_id not in active_words_games:
        await event.reply("ü§∑ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.")
        return

    game_data = active_words_games[chat_id]

    if any(p['id'] == player_id for p in game_data['players']):
        await event.reply("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    if game_data['state'] != 'active':
        await event.reply("üëÄ –°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .—Å–ª–≤–æ–π—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
        return

    game_data['players'].insert(game_data['current_player_index'], {'id': player_id, 'name': player_name})
    save_words_games(active_words_games)

    # Use the new helper for the returning player
    returning_player_mention = format_player_mention({'id': player_id, 'name': player_name})
    await event.reply(f"üéâ {returning_player_mention} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä—É!")


async def start_words_game_actual(event, client):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É '–°–ª–æ–≤–∞' –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤."""
    chat_id = str(event.chat_id)
    organizer_id = event.sender_id

    print(f"DEBUG: .—Å–ª—Å—Ç–∞—Ä—Ç received in chat {chat_id} by {organizer_id}.")

    if chat_id not in active_words_games:
        await client.send_message(event.chat_id, "ü§∑ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è '–°–ª–æ–≤–∞'.")
        return

    game_data = active_words_games[chat_id]

    if game_data['organizer_id'] != organizer_id:
        await client.send_message(event.chat_id, "‚õî –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å.")
        return

    if game_data['state'] == 'active':
        await client.send_message(event.chat_id, "‚ÑπÔ∏è–ò–≥—Ä–∞ '–°–ª–æ–≤–∞' —É–∂–µ –∏–¥—ë—Ç.")
        return

    if len(game_data['players']) < 2: # –ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä + 1)
        await client.send_message(event.chat_id, "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
        return

    game_data['state'] = 'active'
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    random.shuffle(game_data['players'])
    game_data['current_player_index'] = 0

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Ä–≤—É—é –±—É–∫–≤—É (–±–µ–∑ —ä, —å, —ã, –π, —â, —ç, —é, —è)
    russian_alphabet = "–∞–±–≤–≥–¥–µ–∂–∑–∏–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à"
    first_letter = random.choice(russian_alphabet).upper() # –ë–æ–ª—å—à–∞—è –±—É–∫–≤–∞

    game_data['last_word'] = f"@{first_letter}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º @ —á—Ç–æ–±—ã –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –±—É–∫–≤—É
    game_data['used_words'] = [] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    save_words_games(active_words_games) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    current_player = game_data['players'][game_data['current_player_index']]
    
    # Use the new helper for current player mention
    current_player_mention = format_player_mention(current_player)

    await client.send_message( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
        event.chat_id,
        f"‚úÖ **–ò–≥—Ä–∞ '–°–ª–æ–≤–∞' –Ω–∞—á–∞–ª–∞—Å—å!** (ID –∏–≥—Ä—ã: `{game_data['game_id']}`)\n"
        f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥: {current_player_mention}\n"
        f"–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –±—É–∫–≤—É **{first_letter}**."
    )
    print(f"DEBUG: Game {game_data['game_id']} started in chat {chat_id}. First letter: {first_letter}")


async def process_word_turn(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ '–°–ª–æ–≤–∞'.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ *–ª—é–±–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞,
    –Ω–æ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–≥—Ä—ã.
    """
    chat_id = str(event.chat_id)
    sender_id = event.sender_id
    word = event.text.strip().lower()

    print(f"DEBUG: Processing potential word turn: '{word}' from {sender_id} in chat {chat_id}")

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
    game_commands = [
        '.—Å–ª–ø–æ–¥–±–æ—Ä', '.—Å–ª–≤–æ–π—Ç–∏', '.—Å–ª—Å—Ç–∞—Ä—Ç', '.—Å–ª—Å—Ç–æ–ø', '.—Å–ª–≤—ã–π—Ç–∏'
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if any(word.startswith(cmd) for cmd in game_commands):
        print(f"DEBUG: Message '{word}' is a game command, skipping process_word_turn.")
        return # –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –æ–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–≤–æ–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º


    if chat_id not in active_words_games or active_words_games[chat_id]['state'] != 'active':
        print(f"DEBUG: Game not active in chat {chat_id}.")
        return # –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ

    game_data = active_words_games[chat_id]
    current_player_index = game_data['current_player_index']
    current_player = game_data['players'][current_player_index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
    if sender_id != current_player['id']:
        print(f"DEBUG: Sender {sender_id} is not current player {current_player['id']}. Ignoring.")
        # await event.reply("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!") # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∞–º–Ω–æ
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞:
    # 1. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
    if not re.fullmatch(r'[–∞-—è—ë]+', word):
        await event.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.")
        print(f"DEBUG: Invalid word '{word}' (non-russian characters).")
        return

    # 2. –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
    if len(word) < 2:
        await event.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 –±—É–∫–≤.")
        print(f"DEBUG: Invalid word '{word}' (too short).")
        return

    last_word_info = game_data['last_word']
    required_letter = last_word_info[-1] # –ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    if last_word_info.startswith('@'): # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∏ last_word = @–ë–£–ö–í–ê
        required_letter = last_word_info[1].lower() # –ë–µ—Ä–µ–º –±—É–∫–≤—É –ø–æ—Å–ª–µ @

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –±—É–∫–≤ —ä, —å, —ã
    if required_letter in '—ä—å—ã':
        if len(last_word_info) > 1 and not last_word_info.startswith('@'):
            required_letter = last_word_info[-2].lower() # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É
        else:
            pass # –ï—Å–ª–∏ –±–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É, –æ–Ω –¥–æ–ª–∂–µ–Ω –∏–∑–±–µ–≥–∞—Ç—å —ä, —å, —ã


    if not word.startswith(required_letter):
        await event.reply(f"‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É **{required_letter.upper()}**.")
        print(f"DEBUG: Invalid word '{word}' (does not start with '{required_letter}').")
        return

    if word in game_data['used_words']:
        await event.reply("‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        print(f"DEBUG: Invalid word '{word}' (already used).")
        return

    # –°–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!
    game_data['last_word'] = word
    game_data['used_words'].append(word)
    
    # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–Å–¢–ß–ò–ö –°–õ–û–í –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ò–ì–†–û–ö–ê
    game_data['players'][current_player_index]['words_count'] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    game_data['current_player_index'] = (game_data['current_player_index'] + 1) % len(game_data['players'])
    next_player = game_data['players'][game_data['current_player_index']]

    save_words_games(active_words_games) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
    next_required_letter = word[-1].lower()
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ —ä, —å, —ã - –∏—â–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é
    if next_required_letter in '—ä—å—ã':
        if len(word) > 1:
            next_required_letter = word[-2].lower()
        else:
            await event.reply(f"‚ÅâÔ∏è –°–ª–æ–≤–æ '{word}' –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '{next_required_letter.upper()}'. –ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—É—é –±—É–∫–≤—É.")
            print(f"WARNING: Word '{word}' ends with '{next_required_letter}', which is a problematic letter for game rules. Next letter will be based on second to last character.")
            return

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò ValueError: Cannot find any entity corresponding to "-1002236998585"
    current_chat_entity = await event.get_chat() # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
    
    # Use the new helper for next player mention
    next_player_mention = format_player_mention(next_player)

    await client.send_message(
        current_chat_entity, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        f"‚úÖ –ó–∞—Å—á–∏—Ç–∞–Ω–æ! **{word.capitalize()}**\n"
        f"–°—á—ë—Ç {format_player_mention(current_player)}: **{current_player['words_count']}** —Å–ª–æ–≤.\n" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç
        f"–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: {next_player_mention}\n"
        f"–í–∞–º –Ω–∞ –±—É–∫–≤—É **{next_required_letter.upper()}**."
    )
    print(f"DEBUG: Game {game_data['game_id']}: Player {current_player['name']} played '{word}'. Next turn for {next_player['name']} on '{next_required_letter}'.")

    
async def stop_words_game(event, client):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É '–°–ª–æ–≤–∞'."""
    chat_id = str(event.chat_id)
    sender_id = event.sender_id

    print(f"DEBUG: .—Å–ª—Å—Ç–æ–ø received in chat {chat_id} by {sender_id}.")

    if chat_id not in active_words_games:
        await client.send_message(event.chat_id, "ü§∑ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã '–°–ª–æ–≤–∞'.")
        return

    game_data = active_words_games[chat_id]

    # –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É .—Å–ª–≤–æ–π—Ç–∏ (–µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –ø–æ —Ñ–∞–∫—Ç—É)
    # –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É. –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É—à–µ–ª, —Ç–æ –∏–≥—Ä—É –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ—Å—Ç–∞–≤–∏–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É,
    # –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä (–≤ active_words_games) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å sender_id.
    if game_data['organizer_id'] != sender_id:
        await client.send_message(event.chat_id, "‚õî –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
        return

    game_id = game_data['game_id']
    
    winning_message = ""
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏, –æ–±—ä—è–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ "–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º"
    if game_data['state'] == 'active' and game_data['players']:
        last_active_player = game_data['players'][game_data['current_player_index']]
        player_mention = format_player_mention(last_active_player)
        winning_message = f"üéâ **{player_mention} –ø–æ–±–µ–¥–∏–ª(–∞)!** –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
    else:
        winning_message = "–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."

    del active_words_games[chat_id]
    save_words_games(active_words_games)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await client.send_message(
        event.chat_id, 
        f"**‚úÖ –ò–≥—Ä–∞ '–°–ª–æ–≤–∞' —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID: `{game_id}` - –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n{winning_message}"
    )
    print(f"DEBUG: Game {game_id} stopped in chat {chat_id}. Winner declared: {winning_message}")


async def leave_words_game(event, client):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –≤—ã–π—Ç–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã '–°–ª–æ–≤–∞'."""
    chat_id = str(event.chat_id)
    player_id = event.sender_id
    player_name = event.sender.first_name

    print(f"DEBUG: .—Å–ª–≤—ã–π—Ç–∏ received in chat {chat_id} by {player_name} ({player_id}).")

    if chat_id not in active_words_games:
        await client.send_message(event.chat_id, "ü§∑ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã '–°–ª–æ–≤–∞', –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏.")
        return

    game_data = active_words_games[chat_id]

    initial_player_count = len(game_data['players'])
    
    # Remove the player who left
    game_data['players'] = [p for p in game_data['players'] if p['id'] != player_id]

    if len(game_data['players']) == initial_player_count:
        await client.send_message(event.chat_id, "üö´ –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    # Use the new helper for the leaving player
    leaving_player_mention = format_player_mention({'id': player_id, 'name': player_name})

    # Check player count *after* removing the player
    if len(game_data['players']) == 1 and game_data['state'] == 'active':
        remaining_player = game_data['players'][0]
        game_id = game_data['game_id']
        
        del active_words_games[chat_id]
        save_words_games(active_words_games) # Save state before ending the game
        
        # Use the new helper for the remaining player
        remaining_player_mention = format_player_mention(remaining_player)
        
        await client.send_message(
            event.chat_id,
            f"‚úÖ {leaving_player_mention} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.\n"
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {remaining_player_mention}! –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ –∏ **–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏** –∏–≥—Ä—É '–°–ª–æ–≤–∞' —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID: `{game_id}`!"
        )
        print(f"DEBUG: Player {player_name} left game {game_id} in chat {chat_id}. Player {remaining_player['name']} won.")
        return
    
    elif len(game_data['players']) < 2 and game_data['state'] == 'active': # This handles 0 players or if it becomes 0 after this
        organizer_name = game_data.get('organizer_name', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä') # Fallback in case organizer_name is missing
        organizer_id = game_data.get('organizer_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') # Fallback
        game_id = game_data['game_id']
        
        del active_words_games[chat_id]
        save_words_games(active_words_games) # Save state before ending the game
        
        await client.send_message(
            event.chat_id,
            f"‚úÖ {leaving_player_mention} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. "
            f"‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –∏–≥—Ä–∞ —Å ID: `{game_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        )
        print(f"DEBUG: Player {player_name} left game {game_id} in chat {chat_id}. Game ended due to insufficient players.")
        return
    
    # If the current player left, move to the next player
    if game_data['state'] == 'active' and game_data['players']: # Ensure there are still players
        # Adjust current_player_index if the removed player was the current one
        # The modulo operation handles wrapping around to the start of the list
        game_data['current_player_index'] = game_data['current_player_index'] % len(game_data['players'])
        next_player = game_data['players'][game_data['current_player_index']]
        
        # Use the new helper for the next player
        next_player_mention = format_player_mention(next_player)

        await client.send_message(
            event.chat_id,
            f"‚úÖ {leaving_player_mention} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.\n"
            f"üì£ –¢–µ–ø–µ—Ä—å —Ö–æ–¥: {next_player_mention} –Ω–∞ –±—É–∫–≤—É **{game_data['last_word'][-1].upper()}**."
        )
    else: # If game is not active or no players left (handled by previous block but good for safety)
        await client.send_message(event.chat_id, f"{leaving_player_mention} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.")

    save_words_games(active_words_games) # Save state
    print(f"DEBUG: Player {player_name} left game {game_data.get('game_id', 'N/A')} in chat {chat_id}. Game continues.")

from telethon import events

async def multicolor_heart_handler(event, client):
    """
    –ö–æ–º–∞–Ω–¥–∞ .—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ ‚Äî —Ä–∏—Å—É–µ—Ç —Å–µ—Ä–¥—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏.
    """
    outline = "ü§ç"
    heart_symbol = "X"
    fill_colors = ["‚ù§Ô∏è", "üíô", "üíö", "üíú", "üß°", "üíõ", "üñ§", "ü§é", "üíó"]

    heart_template = [
        "  XX   XX  ",
        " XXXX XXXX ",
        "XXXXXXXXXXX",
        "XXXXXXXXXXX",
        " XXXXXXXXX ",
        "  XXXXXXX  ",
        "   XXXXX   ",
        "    XXX    ",
        "     X    ",
    ]

    height = len(heart_template)
    width = max(len(row) for row in heart_template)

    grid = [[outline for _ in range(width)] for _ in range(height)]
    coords = []

    for r in range(height):
        for c in range(len(heart_template[r])):
            if heart_template[r][c] == heart_symbol:
                coords.append((r, c))

    random.shuffle(coords)

    def render():
        return "\n".join("".join(row) for row in grid)

    msg = await event.respond(render())

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–∏–∫—Å–µ–ª–µ–π", –∑–∞–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    batch_size = 10 
    
    for i in range(0, len(coords), batch_size):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Ä—Ü–∏—é "–ø–∏–∫—Å–µ–ª–µ–π"
        for r, c in coords[i:i + batch_size]:
            grid[r][c] = random.choice(fill_colors)
        
        try:
            await msg.edit(render())
        except Exception:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ
            break
        await asyncio.sleep(0.05)  # —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏

    await msg.edit(render() + "\n\nüåà –°–µ—Ä–¥—Ü–µ –≥–æ—Ç–æ–≤–æ!")

# –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Telethon:
# client.on(events.NewMessage(pattern=r'\.—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ'))(multicolor_heart_handler)



async def multicolor_heart_generator(from_user: str, to_user: str, event) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ.
    """
    outline = "ü§ç"
    heart_symbol = "X"
    fill_colors = ["‚ù§Ô∏è", "üíô", "üíö", "üíú", "üß°", "üíõ", "üñ§", "ü§é", "üíó"]

    heart_template = [
        "  XX   XX  ",
        " XXXX XXXX ",
        "XXXXXXXXXXX",
        "XXXXXXXXXXX",
        " XXXXXXXXX ",
        "  XXXXXXX  ",
        "   XXXXX   ",
        "    XXX    ",
        "     X     ",
    ]

    height = len(heart_template)
    width = max(len(row) for row in heart_template)

    grid = [[outline for _ in range(width)] for _ in range(height)]
    coords = []

    for r in range(height):
        for c in range(len(heart_template[r])):
            if heart_template[r][c] == heart_symbol:
                coords.append((r, c))

    random.shuffle(coords)

    def render(current_text=""):
        return "\n".join("".join(row) for row in grid) + current_text

    msg = await event.respond(render())

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–∏–∫—Å–µ–ª–µ–π", –∑–∞–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    batch_size = 10 
    
    for i in range(0, len(coords), batch_size):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Ä—Ü–∏—é "–ø–∏–∫—Å–µ–ª–µ–π"
        for r, c in coords[i:i + batch_size]:
            grid[r][c] = random.choice(fill_colors)
        
        try:
            await msg.edit(render())
        except MessageNotModifiedError:
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã Telegram –µ–≥–æ –æ–±–Ω–æ–≤–∏–ª.
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞: {e}")
            break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await asyncio.sleep(0.05)   # —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏

    final_message = f"\n\n–û—Ç: {from_user}\n–ö–æ–º—É: {to_user}"
    await msg.edit(render(final_message))

async def send_heart_command(event):
            sender_id = event.sender_id
            chat_id = event.chat_id
            current_time = time.time()

            if sender_id in last_message_times and (current_time - last_message_times[sender_id] < COMMAND_COOLDOWN):
                await event.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {COMMAND_COOLDOWN - (current_time - last_message_times[sender_id]):.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–Ω–æ–≤–∞.")
                return
            last_message_times[sender_id] = current_time

            try:
                target_username_or_id = event.pattern_match.group(1).strip()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                sender_user = await event.get_sender()
                from_name = sender_user.first_name if sender_user.first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                if sender_user.username:
                    from_name += f" (@{sender_user.username})"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ ID
                target_user = None
                try:
                    target_user = await client.get_entity(target_username_or_id)
                except UsernameInvalidError:
                    await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return
                except ValueError:
                     # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int –¥–ª—è ID
                    await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID.")
                    return

                if isinstance(target_user, User):
                    to_name = target_user.first_name if target_user.first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    if target_user.username:
                        to_name += f" (@{target_user.username})"
                else:
                    # –ï—Å–ª–∏ target_user –Ω–µ —è–≤–ª—è–µ—Ç—Å—è User (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ Channel –∏–ª–∏ Chat)
                    await event.reply("–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–¥—Ü–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∞ –Ω–µ —á–∞—Ç–∞–º –∏–ª–∏ –∫–∞–Ω–∞–ª–∞–º.")
                    return

                # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                await event.delete() 

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞
                await multicolor_heart_generator(from_name, to_name, event)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å–µ—Ä–¥—Ü–µ: {e}")
                await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")






async def userbots_info_handler(event, client):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .—é–∑–µ—Ä–±–æ—Ç—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.
    """
    responses = []
    for idx, acc in enumerate(clients, start=1):
        try:
            me = await acc.get_me()
            username = f"@{me.username}" if me.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
            full_name = f"{me.first_name or ''} {me.last_name or ''}".strip() or "–ù–µ—Ç –∏–º–µ–Ω–∏"
            user_id = me.id
            phone = getattr(me, 'phone', '–°–∫—Ä—ã—Ç')
            is_premium = "‚úÖ" if getattr(me, 'premium', False) else "‚ùé"
            lang_code = getattr(me, 'lang_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            responses.append(
                f"{idx}. ü§ñ **–ê–∫–∫–∞—É–Ω—Ç:** `{user_id}`\n"
                f"   ‚Ä¢ –ò–º—è: `{full_name}`\n"
                f"   ‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
                f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `+{phone}`\n"
                f"   ‚Ä¢ Premium: {is_premium}\n"
                f"   ‚Ä¢ –Ø–∑—ã–∫: `{lang_code}`\n"
            )
        except Exception as e:
            responses.append(f"{idx}. ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    full_message = "üì± **–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç—ã:**\n\n" + "\n".join(responses)
    await event.edit(full_message)



async def pin_message_handler(event, client): # –î–æ–±–∞–≤–ª–µ–Ω client
    if not event.reply_to_msg_id:
        await event.edit("`–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å.`")
        return

    try:
        chat = await event.get_chat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ–º—Å—è –ª–∏ –º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
        if isinstance(chat, (Channel, Chat)): # –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
            me_in_chat = await client.get_permissions(chat, await client.get_me())
            if me_in_chat.pin_messages:
                replied_message = await event.get_reply_message()
                if replied_message:
                    await client.pin_message(chat, replied_message, notify=False) # notify=False —á—Ç–æ–±—ã –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤—Å–µ—Ö
                    await event.edit("`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.`")
                    await asyncio.sleep(2) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ
                    await event.delete()
                else:
                    await event.edit("`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è.`")
            else:
                await event.edit("`–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ.`")
        else: # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
            await event.edit("`–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö.`")

    except ChatAdminRequiredError:
        await event.edit("`–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º '–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'.`")
    except MessageIdInvalidError:
        await event.edit("`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è.`")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await event.edit(f"`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}: {e}`")

async def dice_roll_handler(event, client): # –î–æ–±–∞–≤–ª–µ–Ω client
    await event.edit("‚úÖ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫...")
    await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    result = random.randint(1, 6)
    await event.edit(f"üé≤ –í—ã–ø–∞–ª–æ: {result}")

async def colorful_heart_handler(event, client):
    """
    –ö–æ–º–∞–Ω–¥–∞ .—Ü–≤–µ—Ç–∞—Å–µ—Ä–¥—Ü–∞ ‚Äî —Ä–∏—Å—É–µ—Ç —Å–µ—Ä–¥—Ü–µ –≤ —Ä–∞–º–∫–µ, –∑–∞–ª–∏–≤–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—è–µ—Ç—Å—è —Ü–≤–µ—Ç–∞–º–∏.
    """
    outline = "ü§ç"  # –†–∞–º–∫–∞
    fill_colors = ["‚ù§Ô∏è", "üíô", "üíö", "üíú", "üß°", "üíõ", "üñ§"]

    # –®–∞–±–ª–æ–Ω —Å–µ—Ä–¥—Ü–∞ (X ‚Äî –∑–∞–ª–∏–≤–∫–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—É—Å—Ç–æ—Ç–∞)
    heart_template = [
        "  XX   XX  ",
        " XXXX XXXX ",
        "XXXXXXXXXXX",
        "XXXXXXXXXXX",
        " XXXXXXXXX ",
        "  XXXXXXX  ",
        "   XXXXX   ",
        "    XXX    ",
        "     X     ",
    ]

    # –†–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    height = len(heart_template)
    width = max(len(row) for row in heart_template)

    def render(fill_char):
        grid = []
        for r in range(height):
            row = ""
            for c in range(width):
                if c < len(heart_template[r]) and heart_template[r][c] == "X":
                    row += fill_char
                else:
                    row += outline
            grid.append(row)
        return "\n".join(grid)

    msg = await event.respond("üîÅ –†–∏—Å—É—é —Å–µ—Ä–¥—Ü–µ...")

    for color in fill_colors:
        await asyncio.sleep(0.6)
        try:
            await msg.edit(render(color))
        except Exception:
            break

    await msg.edit(render(fill_colors[-1]) + "\n\nüíñ –¶–≤–µ—Ç–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ –≥–æ—Ç–æ–≤–æ!")



async def keep_online(client, session_name): # <-- –î–æ–±–∞–≤–ª—è–µ–º session_name –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'read acknowledge', —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å '–æ–Ω–ª–∞–π–Ω',
    –µ—Å–ª–∏ —Ñ–ª–∞–≥ online_status_enabled –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True.
    """
    print(f"[{session_name}] –ó–∞–¥–∞—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

    while True:
        if online_status_enabled.get(session_name, False):
            try:
                # –í —ç—Ç–æ–π —á–∞—Å—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º asyncio —Ä–∞–±–æ—Ç–∞—Ç—å
                pass

            except FloodWaitError as e:
                print(f"[{session_name}] FloodWait –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞: {e.seconds} —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(e.seconds + 5)
            except asyncio.CancelledError:
                print(f"[{session_name}] –ó–∞–¥–∞—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                break
            except Exception as e:
                print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω–∞: {e}")
                
        await asyncio.sleep(60)

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—á–Ω—ã–º –æ–Ω–ª–∞–π–Ω–æ–º ---
async def enable_online_handler(event, client, session_name): # <--- –î–û–ë–ê–í–¨–¢–ï 'session_name' —Å—é–¥–∞
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª) ---
    me = await event.client.get_me()
    my_id = me.id
    sender_id = event.sender_id

    if sender_id != my_id:
        return
    # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---

    online_status_enabled[session_name] = True
    print(f"[{session_name}] –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤–∫–ª—é—á–µ–Ω.")
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ client.send_message, –∞ –Ω–µ event.edit
    await event.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    await client.send_message(event.chat_id, "‚úÖ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω **–≤–∫–ª—é—á–µ–Ω**.")


async def disable_online_handler(event, client, session_name): # <--- –î–û–ë–ê–í–¨–¢–ï 'session_name' —Å—é–¥–∞
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---
    me = await event.client.get_me()
    my_id = me.id
    sender_id = event.sender_id

    if sender_id != my_id:
        return
    # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---

    online_status_enabled[session_name] = False
    print(f"[{session_name}] –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤—ã–∫–ª—é—á–µ–Ω.")
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ client.send_message, –∞ –Ω–µ event.edit
    await event.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    await client.send_message(event.chat_id, "‚ùå –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω **–≤—ã–∫–ª—é—á–µ–Ω**.")
    
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ,
# –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä—è–¥–æ–º —Å load_nicknames –∏ save_nicknames.
async def get_user_display_name(user_id, chat_id, client):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≠–¢–û–ì–û –ß–ê–¢–ê (–¥–ª—è userbot'–∞),
    –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username) –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è,
    —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –µ–≥–æ –∫–∞–∫ Markdown-—Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å.
    """
    global chat_nicknames

    try:
        current_chat_entity = await client.get_entity(chat_id)
        chat_id_key = await _get_normalized_chat_id(current_chat_entity)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å entity —á–∞—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –≥–¥–µ chat_id == user_id
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–±–æ–π. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º chat_id –∫–∞–∫ –∫–ª—é—á.
        chat_id_key = str(chat_id) 

    user_id_int = int(user_id)
    me = await client.get_me()

    if user_id_int == me.id:
        if chat_id_key in chat_nicknames:
            display_name = chat_nicknames[chat_id_key]
            return f"[{display_name}](tg://user?id={user_id_int})"
        else:
            pass # –ü—Ä–æ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –Ω–∏–∂–µ

    try:
        user_entity = await client.get_entity(user_id_int)
        
        display_name = user_entity.username
        if not display_name:
            display_name = f"{user_entity.first_name or ''} {user_entity.last_name or ''}".strip()
            if not display_name:
                display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        return f"[{display_name}](tg://user?id={user_entity.id})"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id_int}: {e}")
        return f"[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{user_id_int}](tg://user?id={user_id_int})"

    
# --- –í–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π rp_command_handler ---

async def rp_command_handler(event, client, action_templates):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—É –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª) ---
    me = await event.client.get_me()
    my_id = me.id
    sender_id = event.sender_id

    if sender_id != my_id:
        return # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –≤—ã—Ö–æ–¥–∏–º
    # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---

    args = event.raw_text.split(maxsplit=1)
    command = args[0].lower()
    action_name = command[1:] # –ù–∞–ø—Ä–∏–º–µ—Ä, '–æ–±–Ω—è—Ç—å' –∏–∑ '.–æ–±–Ω—è—Ç—å'
    
    chat = await event.get_chat()
    chat_id = chat.id # –ò—Å–ø–æ–ª—å–∑—É–µ–º event.chat.id –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ get_user_display_name

    target_user_obj = None
    
    sender_user_obj = await event.get_sender()
    sender_name_formatted = await get_user_display_name(sender_user_obj.id, chat_id, client)

    target_name_formatted = ""
    if len(args) > 1:
        target_input = args[1].strip()
        if target_input.startswith('@'):
            try:
                target_user_obj = await client.get_entity(target_input)
            except (UsernameInvalidError, ValueError):
                pass
        elif event.is_reply:
            reply_msg = await event.get_reply_message()
            if reply_msg and reply_msg.sender:
                target_user_obj = reply_msg.sender
        
        if target_user_obj:
            target_name_formatted = await get_user_display_name(target_user_obj.id, chat_id, client)
        elif target_input:
            target_name_formatted = f"**{target_input}**"
    
    templates = action_templates.get(action_name)
    if not templates:
        await event.edit(f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã –¥–ª—è RP-–∫–æ–º–∞–Ω–¥—ã `{command}`.")
        return 

    chosen_template = random.choice(templates)

    message_text = ""
    if target_name_formatted:
        message_text = chosen_template.format(sender=sender_name_formatted, target=target_name_formatted)
    else:
        if '{target}' in chosen_template:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–ª—å, –Ω–æ –µ–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–∞–∫ —Ü–µ–ª—å (–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Å–æ–±–æ–π)
            message_text = chosen_template.format(sender=sender_name_formatted, target=sender_name_formatted)
        else:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏
            message_text = chosen_template.format(sender=sender_name_formatted)

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò GIF ---
    gif_urls = RP_ACTION_GIFS.get(action_name)
    if gif_urls:
        chosen_gif_url = random.choice(gif_urls)
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å—é
            await client.send_file(event.chat_id, chosen_gif_url, caption=message_text, parse_mode='md')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{action_name}': {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ GIF, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await client.send_message(event.chat_id, message_text, parse_mode='md')
    else:
        # –ï—Å–ª–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await event.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await client.send_message(event.chat_id, message_text, parse_mode='md')

async def _get_normalized_chat_id(entity):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ (—Å—Ç—Ä–æ–∫—É), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª—é—á.
    –î–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID.
    –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if isinstance(entity, Channel):
        return str(-1000000000000 + entity.id) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± Telethon –¥–ª—è Channel ID
    elif isinstance(entity, Chat):
        return str(-entity.id) # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø (Chat)
    else: # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (User)
        return str(entity.id)

async def quote_of_the_day_handler(event, client): # –î–æ–±–∞–≤–ª–µ–Ω client
    await event.edit("`–ü–æ–ª—É—á–∞—é —Ü–∏—Ç–∞—Ç—É –¥–Ω—è...`")
    try:
        async with httpx.AsyncClient() as http_client:
            response = await http_client.get("https://quotes.rest/qod?language=ru") # –ó–∞–ø—Ä–æ—Å —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ HTTP (4xx –∏–ª–∏ 5xx)
            data = response.json()
            
            if data and 'contents' in data and 'quotes' in data['contents'] and data['contents']['quotes']:
                quote = data['contents']['quotes'][0]
                text = quote.get('quote')
                author = quote.get('author')
                
                if text and author:
                    formatted_quote = f"**–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:**\n\n_¬´{text}¬ª_\n\n**‚Äî {author}**"
                    await event.edit(formatted_quote)
                else:
                    await event.edit("`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞–≤—Ç–æ—Ä.`")
            else:
                await event.edit("`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API.`")

    except httpx.HTTPStatusError as e:
        await event.edit(f"‚ùé –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    except httpx.RequestError as e:
        await event.edit(f"`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}.`")
    except json.JSONDecodeError:
        await event.edit("`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API (–Ω–µ–≤–µ—Ä–Ω—ã–π JSON).`")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã –¥–Ω—è: {e}")
        await event.edit(f"`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}`")

async def probability_handler(event, client): # –î–æ–±–∞–≤–ª–µ–Ω client
    # –ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    question_match = event.pattern_match.group(1)
    question = question_match.strip() if question_match else ""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    sender = await event.get_sender()
    sender_mention = f"@{sender.username}" if sender.username else sender.first_name

    probability = random.randint(0, 100)
    
    response_phrases = [
        f"{sender_mention}, —è –¥—É–º–∞—é, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - {probability}%\n‚ùì–í–æ–ø—Ä–æ—Å: {question}",
        f"{sender_mention}, –º–æ–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç: {probability}%\n‚ùì–í–æ–ø—Ä–æ—Å: {question}",
        f"–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, {sender_mention}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probability}%\n‚ùì–í–æ–ø—Ä–æ—Å: {question}",
        f"–•–º, {sender_mention}... {probability}%\n‚ùì–í–æ–ø—Ä–æ—Å: {question}",
    ]
    
    if question: # –ï—Å–ª–∏ –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É —Å –≤–æ–ø—Ä–æ—Å–æ–º
        response_phrases.append(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å '{question}' –ø–æ –º–æ–µ–π –æ—Ü–µ–Ω–∫–µ, {sender_mention}, —Ä–∞–≤–Ω–∞ {probability}%")
    
    await event.edit(random.choice(response_phrases))

async def love2_handler(event, client):
    """
    –ù–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥–µ—á–∫–∞.
    """
    hearts = ["üíì", "üíó", "üíñ", "üíò", "üíï", "üíû", "‚ù§Ô∏è", "‚ù§Ô∏è‚Äçüî•"]
    msg = await event.edit("‚ù§Ô∏è")
    for i in range(3):
        for h in hearts:
            await msg.edit(h)
            await asyncio.sleep(0.3)
    await msg.edit("üíò –°–µ—Ä–¥–µ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

LOG_FILE_PATH = "usage_logs.txt"

async def log_command_usage(command: str, user_id: int, username: str = None):
    with open(LOG_FILE_PATH, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()} ‚Äî {command} –æ—Ç {username or user_id}\n")

async def send_logs_to_favorites(event, client):
    try:
        if not os.path.exists(LOG_FILE_PATH):
            await event.edit("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            return

        await event.edit("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ...")
        await client.send_file("me", LOG_FILE_PATH, caption="üìÑ –õ–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥")
        await event.delete()

    except Exception as e:
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")

async def log_command_usage(command: str, user_id: int, username: str = None):
    with open(LOG_FILE_PATH, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ‚Äî {command} –æ—Ç @{username or user_id}\n")

async def set_nickname(event):
    global chat_nicknames
    
    chat_entity = await event.get_chat() # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
    chat_id_key = await _get_normalized_chat_id(chat_entity) # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –∫–ª—é—á–∞

    args = event.pattern_match.group(1)

    if args:
        if args.lower() == '—Å–±—Ä–æ—Å':
            if chat_id_key in chat_nicknames: # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID
                del chat_nicknames[chat_id_key]
                save_nicknames(chat_nicknames)
                await event.edit("‚úÖ –ù–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —Å–±—Ä–æ—à–µ–Ω.")
            else:
                await event.edit("‚ÑπÔ∏è –ù–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            new_nickname = args.strip()
            chat_nicknames[chat_id_key] = new_nickname # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID
            save_nicknames(chat_nicknames)
            await event.edit(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{new_nickname}**")
    else:
        if chat_id_key in chat_nicknames: # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID
            current_nickname = chat_nicknames[chat_id_key]
            await event.edit(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: **{current_nickname}**")
        else:
            await event.edit("üö´ –ù–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .–Ω–∏–∫ [–≤–∞—à_–Ω–∏–∫], —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")


async def list_nicknames(event):
    global chat_nicknames
    chat_entity = await event.get_chat()
    chat_id_key = await _get_normalized_chat_id(chat_entity) # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ID

    message = "‚ÑπÔ∏è **–°–ø–∏—Å–æ–∫ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã:**\n\n"
    
    # 1. –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    me = await event.client.get_me()
    my_user_id_str = str(me.id)

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –¥–ª—è –≠–¢–û–ì–û –ß–ê–¢–ê –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    if chat_id_key in chat_nicknames:
        current_nickname = chat_nicknames[chat_id_key]
        message += f"üó∫Ô∏è –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ: **{current_nickname}**\n"
        # –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏ –µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è/—é–∑–µ—Ä–Ω–µ–π–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        display_name_default = me.username if me.username else me.first_name
        message += f"(–Æ–∑–µ—Ä–Ω–µ–π–º: @{display_name_default if me.username else display_name_default})\n"
    else:
        message += "ü§∑ –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"

    # !!! –ó–¥–µ—Å—å, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
    # –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –∏–º–µ–Ω–∞/–Ω–∏–∫–∏. –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –ù–ï –±—ã–ª–∞ –º–Ω–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    # –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã–≤–æ–¥—É "1. [—ã–≤–∞–ø–ª–¥–≤–∞—Ä–ø–æ]..." –∏ —Ç.–¥.
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–∏–∫, –£–î–ê–õ–ò–¢–ï –≠–¢–£ –õ–û–ì–ò–ö–£.

    await event.edit(message)

async def start_duel(event, client):
    chat_id = str(event.chat_id)
    sender = await event.get_sender()
    sender_id = sender.id
    sender_name = sender.first_name

    if chat_id in active_duels:
        duel = active_duels[chat_id]
        if isinstance(duel, DuelGame):
            await event.reply("‚öî –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –±–æ–π.")
            return
        if duel['p2'] is None:
            duel['p2'] = PlayerState(id=sender_id, name=sender_name)
            game = DuelGame(duel['p1'], duel['p2'], current_turn=duel['p1'].id, chat_id=event.chat_id)
            msg = await client.send_message(
    event.chat_id,
    render_duel(game),
    buttons=[
        [
            Button.inline("üó° –ê—Ç–∞–∫–æ–≤–∞—Ç—å", b"attack"),
            Button.inline("üõ° –ó–∞—â–∏—Ç–∏—Ç—å—Å—è", b"defend"),
        ],
        [
            Button.inline("üí• –°—É–ø–µ—Ä-—É–¥–∞—Ä", b"super"),
            Button.inline("üè≥ –°–¥–∞—Ç—å—Å—è", b"giveup"),
        ]
    ]
)

            game.message_id = msg.id
            active_duels[chat_id] = game
        else:
            await event.reply("‚ùå –£–∂–µ –∏–¥–µ—Ç –±–æ–π –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏.")
    else:
        active_duels[chat_id] = {
            'p1': PlayerState(id=sender_id, name=sender_name),
            'p2': None
        }
        await event.reply("‚öî –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞... –ù–∞–ø–∏—à–∏ `.–±–∏—Ç–≤–∞`, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å.")

async def duel_button_callback(event, client):
    chat_id = str(event.chat_id)
    user_id = event.sender_id
    data = event.data.decode("utf-8")

    if chat_id not in active_duels or not isinstance(active_duels[chat_id], DuelGame):
        await event.answer("–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω", alert=True)
        return

    game = active_duels[chat_id]
    if user_id != game.current_turn:
        await event.answer("‚ùå –ù–µ –≤–∞—à —Ö–æ–¥!", alert=True)
        return

    msg = game.make_move(user_id, data)

    if game.is_over():
        winner = game.get_winner()
        result = f"\n\nüèÜ –ü–æ–±–µ–¥–∏–ª: **{winner.name}**!" if winner else "\n\nü§ù –ù–∏—á—å—è!"
        await event.edit(render_duel(game) + "\n\n" + msg + result, buttons=None)
        del active_duels[chat_id]
        return

    game.current_turn = game.get_opponent(user_id).id

    await event.edit(render_duel(game) + "\n\n" + msg, buttons=[
        [
            Button.inline("üó° –ê—Ç–∞–∫–æ–≤–∞—Ç—å", b"attack"),
            Button.inline("üõ° –ó–∞—â–∏—Ç–∏—Ç—å—Å—è", b"defend"),
        ],
        [
            Button.inline("üí• –°—É–ø–µ—Ä-—É–¥–∞—Ä", b"super"),
            Button.inline("üè≥ –°–¥–∞—Ç—å—Å—è", b"giveup"),
        ]
    ])

# --- –ö–æ–º–∞–Ω–¥–∞ .—Å–ø–∞–º ---
async def spam_command_handler(event, client, session_name):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .—Å–ø–∞–º [—Å–æ–æ–±—â–µ–Ω–∏–µ] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ].
    –°–ø–∞–º–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.
    """
    match = re.match(r'\.—Å–ø–∞–º (.+) (\d+)', event.text)
    if match:
        message_to_spam = match.group(1)
        count = int(match.group(2))
        chat_id = event.chat_id if event.chat_id else event.peer_id

        print(f"[{session_name}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .—Å–ø–∞–º: '{message_to_spam}' {count} —Ä–∞–∑ –≤ —á–∞—Ç–µ {chat_id}")

        if count <= 0:
            await event.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–º–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            print(f"[{session_name}] –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–º–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        if count > 100:
            await event.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–º–∞ –∑–∞ —Ä–∞–∑ - 100.")
            print(f"[{session_name}] –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–º–∞ (100).")
            return


        # --- –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –°–ü–ê–ú–ê ---
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            await client.send_message(event.peer_id, f'‚úÖ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: "`{message_to_spam}`"')
            print(f"[{session_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–ø–∞–º–∞ –≤ —á–∞—Ç {chat_id}.")
            await asyncio.sleep(0.3) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        except Exception as e:
            print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–ø–∞–º–∞: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        successful_sends = 0
        for i in range(count):
            try:
                await client.send_message(event.peer_id, message_to_spam)
                successful_sends += 1
                print(f"[{session_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {successful_sends}/{count}: '{message_to_spam}' –≤ —á–∞—Ç {chat_id}")
                await asyncio.sleep(0.15) # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.15 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except FloodWaitError as e:
                print(f"[{session_name}] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∏ —Å–ø–∞–º–µ: {e.seconds} —Å–µ–∫—É–Ω–¥. –û–∂–∏–¥–∞–Ω–∏–µ...")
                await asyncio.sleep(e.seconds + 0.15) # –î–æ–±–∞–≤–ª—è–µ–º 0.15 –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                try:
                    await client.send_message(event.peer_id, message_to_spam)
                    successful_sends += 1
                    print(f"[{session_name}] –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {successful_sends}/{count}: '{message_to_spam}' –ø–æ—Å–ª–µ FloodWait.")
                except Exception as retry_e:
                    print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ FloodWait: {retry_e}. –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ FloodWait: {retry_e}. –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    break
            except PeerFloodError:
                print(f"[{session_name}] –û—à–∏–±–∫–∞ PeerFloodError –ø—Ä–∏ —Å–ø–∞–º–µ. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞.")
                await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞. –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break
            except Exception as e:
                print(f"[{session_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∞–º–µ: {e}")
                await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∞–º–µ: {e}")
                break
        
        if successful_sends == count:
            print(f"[{session_name}] **–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º '{message_to_spam}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ({successful_sends} –∏–∑ {count} —Ä–∞–∑) –≤ —á–∞—Ç–µ {chat_id}.**")
        else:
            print(f"[{session_name}] **–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º '{message_to_spam}' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ ({successful_sends} –∏–∑ {count} —Ä–∞–∑) –≤ —á–∞—Ç–µ {chat_id}.**")
 
async def handle_autoreply_command(event):
    args = event.pattern_match.group(1).strip()
    command_parts = args.split(' ', 1)

    if len(command_parts) == 1 and command_parts[0].lower() == 'list':
        if not autoreplies:
            await event.edit('üì≠ –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç.')
            return

        response = 'üì≠ **–í–∞—à–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:**\n\n'
        for trigger, reply_text in autoreplies.items():
            response += f'‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä: `{trigger}`\n‚Ä¢ –û—Ç–≤–µ—Ç: `{reply_text}`\n\n'
        await event.edit(response)
        return

    if command_parts[0].lower() == 'remove':
        if len(command_parts) < 2:
            await event.edit('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: `.–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç remove –ø—Ä–∏–≤–µ—Ç`')
            return
        trigger_to_remove = command_parts[1].lower()
        if trigger_to_remove in autoreplies:
            del autoreplies[trigger_to_remove]
            save_autoreplies()
            await event.edit(f'‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ `{trigger_to_remove}` —É–¥–∞–ª–µ–Ω.')
        else:
            await event.edit(f'ü§∑‚Äç‚ôÇÔ∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –Ω–∞ `{trigger_to_remove}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    if len(command_parts) < 2:
        await event.edit('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `.–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç [—Ç—Ä–∏–≥–≥–µ—Ä][–æ—Ç–≤–µ—Ç]` –∏–ª–∏ `.–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç remove [—Ç—Ä–∏–≥–≥–µ—Ä]` –∏–ª–∏ `.–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç list`')
        return

    trigger = command_parts[0].lower()
    reply_text = command_parts[1]

    autoreplies[trigger] = reply_text
    save_autoreplies()
    await event.edit(f'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–∫–∞–∂–µ—Ç `{trigger}`, –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç `{reply_text}`.')

async def check_for_autoreply(event):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é MY_USER_ID
    global MY_USER_ID # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    if event.raw_text:
        message_text = event.raw_text.lower()
        
        if MY_USER_ID is None:
            # –ï—Å–ª–∏ MY_USER_ID –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
            # –∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è main), –ø—Ä–æ–ø—É—Å—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É.
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, –µ—Å–ª–∏ main() –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ.
            return

        # –¢–µ–ø–µ—Ä—å MY_USER_ID —Ç–æ—á–Ω–æ –Ω–µ None, –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
        if event.from_id == MY_USER_ID:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —Å–∞–º —é–∑–µ—Ä–±–æ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        for trigger, reply_text in autoreplies.items():
            if trigger in message_text:
                await event.reply(reply_text)
                return

async def handle_google_command(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .google –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google.
    –ü—Ä–∏–º–µ—Ä: .google —á—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–ª–µ–≥—Ä–∞–º
    """
    query = event.pattern_match.group(1).strip()
    await event.edit(f'üîç –ò—â—É –≤ Google: `{query}`...')

    try:
        # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Google –ø–æ–∏—Å–∫–∞
        # –Ω—É–∂–µ–Ω Google Custom Search API –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥.
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ Google.
        search_url = f"https://www.google.com/search?q={requests.utils.quote(query)}"
        response_text = (
            f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É `{query}`:\n\n"
            f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Google]({search_url})"
        )
        await event.edit(response_text, link_preview=True) # link_preview=True –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–∫–∏

    except Exception as e:
        await event.edit(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}')

import random

# Assuming RPS_CHOICES and RPS_RULES are defined elsewhere in your code like this:

async def handle_rps_command(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É .rps –¥–ª—è –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞.
    –ü—Ä–∏–º–µ—Ä: .rps –∫–∞–º–µ–Ω—å
    """
    player_choice_raw = event.pattern_match.group(1).strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if player_choice_raw not in RPS_CHOICES:
        await event.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ `–∫–∞–º–µ–Ω—å`, `–Ω–æ–∂–Ω–∏—Ü—ã` –∏–ª–∏ `–±—É–º–∞–≥–∞`.')
        return

    player_choice = player_choice_raw
    player_emoji = RPS_CHOICES[player_choice]

    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    bot_choice = random.choice(list(RPS_CHOICES.keys()))
    bot_emoji = RPS_CHOICES[bot_choice]

    result_text = f"–¢–≤–æ–π —Ö–æ–¥: {player_emoji} **{player_choice.capitalize()}**\n"
    result_text += f"–ú–æ–π —Ö–æ–¥: {bot_emoji} **{bot_choice.capitalize()}**\n\n"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if player_choice == bot_choice:
        result_text += "ü§ù **–ù–∏—á—å—è!**"
    # –ï—Å–ª–∏ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ö–æ–¥ –±–æ—Ç–∞
    elif RPS_RULES[player_choice] == bot_choice:  # –¢–≤–æ–π —Ö–æ–¥ –ø–æ–±–µ–∂–¥–∞–µ—Ç –º–æ–π
        result_text += "üéâ **–¢—ã –ø–æ–±–µ–¥–∏–ª!**"
    # –ï—Å–ª–∏ —Ö–æ–¥ –±–æ—Ç–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
    elif RPS_RULES[bot_choice] == player_choice:  # –ú–æ–π —Ö–æ–¥ –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–≤–æ–π
        result_text += "ü§ñ **–Ø –ø–æ–±–µ–¥–∏–ª!**"
    # –≠—Ç–æ "else" –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –≤—ã–±–æ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    else:
        result_text += "ü§î –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∏—á—å—è?"  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    await event.reply(result_text)

from telethon import events

async def ignore_user_handler(event, client):
    """
    .+–∏–≥–Ω–æ—Ä [—é–∑–µ—Ä–Ω–µ–π–º/ID] –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∞.
    –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    target_user_id = None
    user_info = None

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    parts = event.text.split(maxsplit=1)
    if len(parts) > 1:
        arg = parts[1].strip()
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π ID
            target_user_id = int(arg)
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user_entity = await client.get_entity(target_user_id)
                if isinstance(user_entity, User):
                    user_info = user_entity
            except Exception:
                # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                pass
        except ValueError:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —é–∑–µ—Ä–Ω–µ–π–º
            if arg.startswith('@'):
                username = arg[1:]
                try:
                    user_entity = await client.get_entity(username)
                    if isinstance(user_entity, User):
                        target_user_id = user_entity.id
                        user_info = user_entity
                except Exception:
                    await event.edit(f"üö´ **–û—à–∏–±–∫–∞:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{arg}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    return
            else:
                await event.edit("üö´ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `.+–∏–≥–Ω–æ—Ä [@—é–∑–µ—Ä–Ω–µ–π–º/ID]` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
    elif event.is_reply:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        replied_message = await event.get_reply_message()
        if replied_message and replied_message.sender_id:
            target_user_id = replied_message.sender_id
            user_info = replied_message.sender
        else:
            await event.edit("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
    else:
        await event.edit("üö´ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `.+–∏–≥–Ω–æ—Ä [@—é–∑–µ—Ä–Ω–µ–π–º/ID]` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if target_user_id is None:
        await event.edit("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if target_user_id == event.sender_id:
        await event.edit("üòÖ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    if target_user_id in ignored_user_ids:
        await event.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user_info.username if user_info and user_info.username else target_user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∞.")
    else:
        ignored_user_ids.add(target_user_id)
        save_ignored_users()
        await event.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user_info.username if user_info and user_info.username else target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∞.")
    
    await asyncio.sleep(3)

# --- –ö–æ–º–∞–Ω–¥–∞ .-–∏–≥–Ω–æ—Ä ---
async def unignore_user_handler(event, client):
    """
    .-–∏–≥–Ω–æ—Ä [—é–∑–µ—Ä–Ω–µ–π–º/ID] –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞.
    """
    target_user_id = None
    user_info = None

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    parts = event.text.split(maxsplit=1)
    if len(parts) > 1:
        arg = parts[1].strip()
        try:
            target_user_id = int(arg)
            try:
                user_entity = await client.get_entity(target_user_id)
                if isinstance(user_entity, User):
                    user_info = user_entity
            except Exception:
                pass
        except ValueError:
            if arg.startswith('@'):
                username = arg[1:]
                try:
                    user_entity = await client.get_entity(username)
                    if isinstance(user_entity, User):
                        target_user_id = user_entity.id
                        user_info = user_entity
                except Exception:
                    await event.edit(f"üö´ **–û—à–∏–±–∫–∞:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{arg}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    return
            else:
                await event.edit("üö´ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `.-–∏–≥–Ω–æ—Ä [@—é–∑–µ—Ä–Ω–µ–π–º/ID]` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
    elif event.is_reply:
        replied_message = await event.get_reply_message()
        if replied_message and replied_message.sender_id:
            target_user_id = replied_message.sender_id
            user_info = replied_message.sender
        else:
            await event.edit("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏–∑ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
    else:
        await event.edit("üö´ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `.-–∏–≥–Ω–æ—Ä [@—é–∑–µ—Ä–Ω–µ–π–º/ID]` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if target_user_id is None:
        await event.edit("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑-–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    if target_user_id not in ignored_user_ids:
        await event.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user_info.username if user_info and user_info.username else target_user_id} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∞.")
    else:
        ignored_user_ids.remove(target_user_id)
        save_ignored_users()
        await event.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@' + user_info.username if user_info and user_info.username else target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞.")
    
    await asyncio.sleep(3)

# REMOVE THIS LINE: @client.on(events.NewMessage(pattern=r'^\.zov(?: (.+))?$', outgoing=True))
async def zov_handler(event, client):
    """
    .zov [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî —É–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –≤ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    parts = event.text.split(maxsplit=1)
    if len(parts) < 2:
        await event.edit("üö´ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** .zov [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    user_message = parts[1]
    # Capitalize the first letter of user_message
    user_message = user_message.capitalize() 

    chat = await event.get_chat()
    sender = await event.get_sender()
    sender_username = sender.username

    mentions = []
    try:
        async for member in client.iter_participants(chat):
            if member.username and member.username != sender_username:
                mentions.append(f"@{member.username}")
    except Exception as e:
        await event.edit(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{e}`\n"
            "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —á–∞—Ç –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω."
        )
        return

    if not mentions:
        await event.edit("ü§∑‚Äç‚ôÇÔ∏è –í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ (–∫—Ä–æ–º–µ –≤–∞—Å, –µ—Å–ª–∏ –µ—Å—Ç—å).")
        return

    notification_header = f"**‚ÄºÔ∏è –í–ê–ñ–ù–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï –û–¢ @{sender_username if sender_username else sender.first_name}:**"
    
    if mentions:
        mentions_line = f"{', '.join(mentions)}"
    else:
        mentions_line = ""

    final_message = f"{notification_header}\n{mentions_line}\n\n‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ:\n{user_message}."

    try:
        await client.send_message(chat, final_message)
    except Exception as e:
        await event.edit(f"‚ùó **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:** `{e}`")


from bs4 import BeautifulSoup
from urllib.parse import quote_plus

async def lyrics_handler(event, client):
    args = event.raw_text.split(" ", 1)
    if len(args) < 2:
        await event.reply("‚õî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.—Ç–µ–∫—Å—Ç–ø–µ—Å–Ω–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]`")
        return

    query = args[1].strip()
    await event.reply(f"üîç –ò—â—É —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏: `{query}`...")

    try:
        # –®–∞–≥ 1: –ø–æ–∏—Å–∫ –≤ Google
        search_query = f"{query} site:genius.com lyrics"
        search_url = f"https://www.google.com/search?q={quote_plus(search_query)}"
        
        headers = {
            "User-Agent": "Mozilla/5.0"
        }

        async with httpx.AsyncClient(headers=headers, timeout=10.0) as client_http:
            search_resp = await client_http.get(search_url)
            soup = BeautifulSoup(search_resp.text, "html.parser")

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ genius
            link_tag = soup.find("a", href=True)
            genius_link = None
            for a in soup.find_all("a", href=True):
                href = a['href']
                if "genius.com" in href:
                    genius_link = href.split("&")[0].replace("/url?q=", "")
                    break

            if not genius_link:
                await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.")
                return

            # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Genius
            genius_resp = await client_http.get(genius_link)
            soup = BeautifulSoup(genius_resp.text, "html.parser")

            lyrics_divs = soup.find_all("div", {"data-lyrics-container": "true"})
            lyrics = "\n".join(div.get_text(separator="\n") for div in lyrics_divs)

            if not lyrics.strip():
                await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å Genius.")
                return

            if len(lyrics) > 4000:
                lyrics = lyrics[:3800] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"

            await event.reply(f"üéµ **{query}**\n\n" + lyrics)

    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º ---
async def start_client(account_config):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    session_name = account_config['session_name']
    api_id = account_config['api_id']
    api_hash = account_config['api_hash']
    
    online_status_enabled[session_name] = False # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

    print(f"–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_name}...")
    client = TelegramClient(session_name, api_id, api_hash)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    # (–ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ client –∏ session_name –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    client.add_event_handler(lambda e: info_handler(e, client), events.NewMessage(pattern=r'\.–∏–Ω—Ñ–æ(?: (.+))?'))
    client.add_event_handler(lambda e: ping_handler(e, client), events.NewMessage(pattern=r'\.–ø–∏–Ω–≥', outgoing=True)) # outgoing=True –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥
    client.add_event_handler(lambda e: love_handler(e, client), events.NewMessage(pattern=r'\.love', outgoing=True))
    client.add_event_handler(lambda e: quote_handler(e, client), events.NewMessage(pattern=r'\.—Ü–∏—Ç'))
    client.add_event_handler(lambda e: cat_handler(e, client), events.NewMessage(pattern=r'\.–∫–æ—Ç–∏–∫–∏'))
    client.add_event_handler(lambda e: dog_handler(e, client), events.NewMessage(pattern=r'\.—Å–æ–±–∞—á–∫–∏',))
    client.add_event_handler(lambda e: add_user_handler(e, client), events.NewMessage(pattern=r'\.–¥–æ–±–∞–≤–∏—Ç—å(?: (.+))?'))
    client.add_event_handler(lambda e: help_handler(e, client), events.NewMessage(pattern=r'\.–ø–æ–º–æ—â—å', outgoing=True))
    client.add_event_handler(lambda e, c=client: ai_handler(e, c), events.NewMessage(pattern=r'^.ai\s+.*')) # –ó–∞–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ ai_handler —Ç–æ–∂–µ outgoing=True
    client.add_event_handler(lambda e: help_handler_page2(e, client), events.NewMessage(pattern=r'\.–ø–æ–º–æ—â—å2', outgoing=True))
    client.add_event_handler(lambda e: fire_handler(e, client), events.NewMessage(pattern=r'\.–æ–≥–æ–Ω—å', outgoing=True))
    client.add_event_handler(lambda e: wiki_handler(e, client), events.NewMessage(pattern=r'\.wiki(?: (.+))?', outgoing=True))
    client.add_event_handler(lambda e: calculator_handler(e, client), events.NewMessage(pattern=r'\.–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä(?: (.+))?'))
    client.add_event_handler(lambda e: weather_handler(e, client), events.NewMessage(pattern=r'\.–ø–æ–≥–æ–¥–∞(?: (.+))?'))
    client.add_event_handler(lambda e: chat_info_handler(e, client, session_name), events.NewMessage(pattern=r'\.—á–∞—Ç–∏–Ω—Ñ–æ', outgoing=True))
    client.add_event_handler(lambda e: botinfo_handler(e, client), events.NewMessage(pattern=r'\.botinfo', outgoing=True))
    client.add_event_handler(lambda e: dice_roll_handler(e, client), events.NewMessage(pattern=r'\.–∫—É–±–∏–∫', outgoing=True))
    client.add_event_handler(lambda e: quote_of_the_day_handler(e, client), events.NewMessage(pattern=r'\.—Ü–∏—Ç–∞—Ç–∞–¥–Ω—è', outgoing=True))
    client.add_event_handler(lambda e: probability_handler(e, client), events.NewMessage(pattern=r'\.–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å(?: (.+))?', outgoing=True))
    
    # –ò–≥–Ω–æ—Ä –∏ –∫–Ω–æ–ø–∫–∏
    client.add_event_handler(lambda e: ignore_handler(e, client),events.NewMessage(pattern=r'^\.–∏–≥–Ω–æ—Ä$', outgoing=True))
    client.add_event_handler(lambda e: show_chats_command_handler(e, client),events.NewMessage(pattern=r'^\.–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å—á–∞—Ç—ã$', outgoing=True))

    client.add_event_handler(lambda e: test_button_handler(e, client), events.NewMessage(pattern=r'\.—Ç–µ—Å—Ç–∫–Ω–æ–ø–∫–∞', outgoing=True))
    client.add_event_handler(test_button_callback, events.CallbackQuery(pattern=r'test_data_123'))

    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å–ª–æ–≤–∞)
    client.add_event_handler(lambda e: start_words_game_setup(e, client), events.NewMessage(pattern=r'\.—Å–ª–ø–æ–¥–±–æ—Ä'))
    client.add_event_handler(lambda e: join_words_game(e, client), events.NewMessage(pattern=r'\.—Å–ª–≤–æ–π—Ç–∏'))
    client.add_event_handler(lambda e: start_words_game_actual(e, client), events.NewMessage(pattern=r'\.—Å–ª—Å—Ç–∞—Ä—Ç'))
    client.add_event_handler(lambda e: stop_words_game(e, client), events.NewMessage(pattern=r'\.—Å–ª—Å—Ç–æ–ø'))
    client.add_event_handler(lambda e: leave_words_game(e, client), events.NewMessage(pattern=r'\.—Å–ª–≤—ã–π—Ç–∏'))
    client.add_event_handler(lambda e: return_to_words_game(e, client), events.NewMessage(pattern=r'\.—Å–ª–≤–µ—Ä–Ω—É—Ç—Å—è'))
    client.add_event_handler(lambda e: pin_message_handler(e, client), events.NewMessage(pattern=r'\.–∑–∞–∫—Ä–µ–ø–∏', outgoing=True))
    
    # –î—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    client.add_event_handler(lambda e: generate_image_handler(e, client), events.NewMessage(pattern=r"\.—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π–∫–∞—Ä—Ç–∏–Ω–∫—É", outgoing=True))
    client.add_event_handler(lambda e: send_logs_to_favorites(e, client), events.NewMessage(pattern=r"\.–ª–æ–≥–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", outgoing=True))
    client.add_event_handler(lambda e: love2_handler(e, client), events.NewMessage(pattern=r"\.—Å–µ—Ä–¥—Ü–µ2", outgoing=True))
    client.add_event_handler(lambda e: colorful_heart_handler(e, client), events.NewMessage(pattern=r"\.—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ", outgoing=True))
    client.add_event_handler(lambda e: multicolor_heart_handler(e, client), events.NewMessage(pattern=r"\.—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–µ—Å–µ—Ä–¥—Ü–µ", outgoing=True))
    client.add_event_handler(lambda e: userbots_info_handler(e, client), events.NewMessage(pattern=r'\.—é–∑–µ—Ä–±–æ—Ç—ã', outgoing=True))
    client.add_event_handler(lambda e: multicolor_heart_generator(e, client), events.NewMessage(pattern=r'\.–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å–µ—Ä–¥—Ü–µ\s+(.+)$', outgoing=True))

    # –ö–æ–º–∞–Ω–¥—ã .–Ω–∏–∫ –∏ .–Ω–∏–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ outgoing=True)
    client.add_event_handler(lambda e: set_nickname(e), events.NewMessage(pattern=r"^\.–Ω–∏–∫(?: (.+))?$", outgoing=True))
    client.add_event_handler(lambda e: list_nicknames(e), events.NewMessage(pattern=r"^\.–Ω–∏–∫–∏$", outgoing=True))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—á–Ω—ã–º –æ–Ω–ª–∞–π–Ω–æ–º (—Ç–µ–ø–µ—Ä—å —Å –ø–µ—Ä–µ–¥–∞—á–µ–π session_name)
    client.add_event_handler(lambda e: enable_online_handler(e, client, session_name), events.NewMessage(pattern=r"^\.–æ–Ω–ª–∞–π–Ω–≤–∫–ª$", outgoing=True))
    client.add_event_handler(lambda e: disable_online_handler(e, client, session_name), events.NewMessage(pattern=r"^\.–æ–Ω–ª–∞–π–Ω–≤—ã–∫–ª$", outgoing=True))
    client.add_event_handler(lambda e: start_duel(e, client), events.NewMessage(pattern=r'^\.–±–∏—Ç–≤–∞$', outgoing=True))
    client.add_event_handler(lambda e: duel_button_callback(e, client), events.CallbackQuery())
    client.add_event_handler(lambda e: spam_command_handler(e, client, session_name), events.NewMessage(pattern=r'\.—Å–ø–∞–º (.+) (\d+)', outgoing=True))
    client.add_event_handler(lambda e: handle_autoreply_command(e), events.NewMessage(pattern=r'\.–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\s+(.+)', outgoing=True))
    client.add_event_handler(handle_google_command, events.NewMessage(pattern=r'\.google\s+(.+)', outgoing=True))
    client.add_event_handler(handle_rps_command, events.NewMessage(pattern=r'\.—Ü—É–µ—Ñ–∞\s+(.+)'))
    client.add_event_handler(lambda e: zov_handler(e, client), events.NewMessage(pattern=r'^\.(?:zov|–≤—ã–∑–æ–≤)(?: (.+))?$'))
    client.add_event_handler(lambda e: ignore_user_handler(e, client), events.NewMessage(pattern=r'^\.(.+)–∏–≥–Ω–æ—Ä(?: (.+))?$', outgoing=True))
    client.add_event_handler(lambda e: unignore_user_handler(e, client), events.NewMessage(pattern=r'^\.-–∏–≥–Ω–æ—Ä(?: (.+))?$', outgoing=True))
    client.on(events.NewMessage(pattern=r'^\.—Ç–µ–∫—Å—Ç–ø–µ—Å–Ω–∏', outgoing=True))(lambda e: lyrics_handler(e, client))


    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è RP-–∫–æ–º–∞–Ω–¥
    register_rp_commands(client) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ–≤ (–µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ *–ª—é–±–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã)
    # –ï—Å–ª–∏ process_word_turn –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞, —É–±–µ—Ä–∏—Ç–µ outgoing=True
    # –ï—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤—å—Ç–µ –±–µ–∑ outgoing=True
    # –ï—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ pattern –∏–ª–∏ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    client.add_event_handler(lambda e: process_word_turn(e, client), events.NewMessage()) 
    client.add_event_handler(check_for_autoreply, events.NewMessage(incoming=True))

    try:
        await client.start()
        user_info = await client.get_me()
        print(f"–ö–ª–∏–µ–Ω—Ç '{session_name}' –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ @{user_info.username if user_info.username else user_info.first_name}")
        
        # --- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –û–¢–°–£–¢–°–¢–í–£–ï–¢ –í –í–ê–®–ï–ú –§–†–ê–ì–ú–ï–ù–¢–ï –ò –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –î–û–ë–ê–í–õ–ï–ù–ê ---
        online_tasks[session_name] = asyncio.create_task(keep_online(client, session_name))
        # -------------------------------------------------------------------------
        
        await client.run_until_disconnected()
    except FloodWaitError as e:
        print(f"[{session_name}] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è: {e.seconds} —Å–µ–∫—É–Ω–¥. –û–∂–∏–¥–∞–Ω–∏–µ...")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ '{session_name}': {e}")
    finally:
        if client.is_connected():
            print(f"–ö–ª–∏–µ–Ω—Ç '{session_name}' –æ—Ç–∫–ª—é—á–µ–Ω.")
            # –í–∞–∂–Ω–æ: —Ç–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if session_name in online_tasks and not online_tasks[session_name].done():
                online_tasks[session_name].cancel()
                try:
                    await online_tasks[session_name] # –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
                except asyncio.CancelledError:
                    pass
            await client.disconnect()

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram.
    """
    if not ACCOUNTS:
        print("–í —Å–ø–∏—Å–∫–µ 'ACCOUNTS' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ API.")
        return
    
    tasks = []
    for account_config in ACCOUNTS:
        tasks.append(start_client(account_config))

    await asyncio.gather(*tasks)

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —é–∑–µ—Ä–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
